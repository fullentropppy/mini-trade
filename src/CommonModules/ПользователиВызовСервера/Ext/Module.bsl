
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ПользователиВызовСервера
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Используемые обозначения:
// * Пользователь		- элемент справочника Пользователи;
// * Пользователь ИБ	- пользователь информационной базы.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Синхронизирует список пользователей со списком пользователей ИБ.
//
Процедура СинхронизироватьСписокПользователей() Экспорт
	
	ПользователиСервер.СинхронизироватьСписокПользователей();
	
КонецПроцедуры

// Возвращает основные данные сеанса текущего пользователя.
//
//  Возвращает структуру данных сеанса текущего пользователя (или Неопределено, если в момент вызова сеанс был завершен):
//	* Пользователь 	- СправочникСсылка.Пользователи - текущий пользователь;
//	* НомерСеанса	- Число							- номер сеанса;
//	* ИмяКомпьютера - Строка						- имя компьютера, на котором запущен сеанс;
//	* ИмяПриложения - Строка						- имя приложения сеанса.
//
// Возвращаемое значение:
//   - Структура, Неопределено
//
Функция ДанныеСеансаТекущегоПользователя() Экспорт
	
	ДанныеТекущегоПользователя = ПользователиСервер.ДанныеСеансаТекущегоПользователя();
	Возврат ДанныеТекущегоПользователя;
	
КонецФункции

// Возвращает ссылку текущего пользователя, сопоставленного с пользователем ИБ.
//
// Параметры:
//	СоздатьПриОтсутствии		- Булево - создать пользователя, если текущий пользователь ИБ не имеет сопоставления с пользователем; 
//  КомментарийФактаИзменения	- Строка - комментарий к записи регистрации изменения, если будет создан новый пользователь.
//
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция ТекущийПользователь(СоздатьПриОтсутствии = Ложь, КомментарийФактаИзменения = "") Экспорт
	
	ТекущийПользователь = ПользователиСервер.ТекущийПользователь(СоздатьПриОтсутствии, КомментарийФактаИзменения);
	Возврат ТекущийПользователь;
	
КонецФункции

// Возвращает текущего пользователя ИБ или его имя.
//
// Параметры:
//  ТолькоИмя - булево - вернуть только имя пользователя ИБ. 
// 
// Возвращаемое значение:
//   - ПользовательИнформационнойБазы, Строка
//
Функция ТекущийПользовательИБ(ТолькоИмя = Ложь) Экспорт
	
	ТекущийПользовательИБ = ПользователиСервер.ТекущийПользовательИБ(ТолькоИмя);
	Возврат ТекущийПользовательИБ;
	
КонецФункции

// Возвращает ссылку пользователя по уникальному идентификатору пользователя ИБ.
//
// Параметры:
//  Идентификатор				- УникальныйИдентификатор 			- уникальный идентификатор пользователя ИБ;
//  СоздатьПриОтсутствии		- Булево 							- создать пользователя, если по уникальному  
//																	  идентификатору пользователь не был найден;
//  ПользовательИБОснование		- ПользовательИнформационнойБазы 	- пользователь ИБ, на основании данных которого
//																	  будет создан новый пользователь. Если не указан, 
//																	  то будут выбраны данные текущего пользователя ИБ;
//  КомментарийФактаИзменения	- Строка					 		- комментарий к записи регистрации изменения,
//																	  если будет создан новый пользователь.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция ПользовательПоИдентификаторуПользователяИБ(Идентификатор, СоздатьПриОтсутствии = Ложь, ПользовательИБОснование = Неопределено, КомментарийФактаИзменения = "") Экспорт
												
	Пользователь = ПользователиСервер.ПользовательПоИдентификаторуПользователяИБ(Идентификатор,	СоздатьПриОтсутствии, ПользовательИБОснование, КомментарийФактаИзменения);	
	Возврат Пользователь;
	
КонецФункции

// Возвращает пользователя ИБ или его имя по уникальному идентификатору пользователя ИБ.
//
// Параметры:
//  Идентификатор	- УникальныйИдентификатор	- уникальный идентификатор пользователя ИБ; 
//  ТолькоИмя		- Булево					- вернуть только имя пользователя ИБ.
// 
// Возвращаемое значение:
//   - ПользовательИнформационнойБазы, Строка, Неопределено 
//
Функция ПользовательИБПоИдентификаторуПользователяИБ(Идентификатор, ТолькоИмя = Ложь) Экспорт
		
	ПользовательИБ = ПользователиСервер.ПользовательИБПоИдентификаторуПользователяИБ(Идентификатор, ТолькоИмя);	
	Возврат ПользовательИБ;
	
КонецФункции

// Возвращает пользователя ИБ или его имя по ссылке сопоставленного пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка сопоставленного пользователя с пользователем ИБ;
//  ТолькоИмя	 - Булево						 - вернуть только имя пользователя ИБ. 
// 
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи, Строка, Неопределено
//
Функция ПользовательИБПоПользователю(Пользователь, ТолькоИмя = Ложь) Экспорт
	
	ПользовательИБ = ПользователиСервер.ПользовательИБПоПользователю(Пользователь, ТолькоИмя);
	Возврат ПользовательИБ;
	
КонецФункции

// Возвращает значение дополнительного свойства пользователя.
//
// Параметры:
//  Свойство			- ПланВидовХарактеристикСсылка.ДополнительныеСвойстваПользователей	- дополнительное свойство пользователя;
//  Пользователь		- СправочникСсылка.Пользователи									 	- пользователь-владелец свойства.
//  																						  Если не указан, то будет выбран текущий пользователь;
//  ЗначениеПоУмолчанию	- Произвольный														- значение по умолчанию при отсутствии дополнительного свойства.
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ЗначениеДополнительногоСвойства(Свойство, Пользователь = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Значение = ПользователиСервер.ЗначениеДополнительногоСвойства(Свойство, Пользователь, ЗначениеПоУмолчанию);
	Возврат Значение;
	
КонецФункции

#КонецОбласти