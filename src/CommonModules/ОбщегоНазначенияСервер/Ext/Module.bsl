
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ОбщегоНазначенияСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает заголовок программы с учетом значения константы ЗаголовокПрограммы.
// 
// Возвращаемое значение:
//   - Строка 
//
Функция ЗаголовокПрограммы() Экспорт
	
	УказанныйЗаголовок 	= Константы.ЗаголовокПрограммы.Получить();
	Заголовок 			= ?(ПустаяСтрока(УказанныйЗаголовок), Метаданные.Синоним, УказанныйЗаголовок); 
	
	Возврат Заголовок;
	
КонецФункции

#Область РаботаСВременнымХранилищем

// Помещает объект во временное хранилище и возвращает адрес временного хранилища.
//
// Параметры:
//  Объект - Произвольный - помещаемый во временное хранилище объект. При необходимости будет преобразован
//							в другой тип для возможности помещения во временное хранилище.
// 
// Возвращаемое значение:
//   - Строка
//
Функция АдресВременногоХранилищаОбъекта(Знач Объект) Экспорт
	  
	// Проверка типа объекта и при необходимости преобразование объекта 
	// в другой тип для возможности помещения во временное хранилище.
	ТекущийОбъект = ?(ТипЗнч(Объект) = Тип("ДанныеФормыКоллекция"), Объект.Выгрузить(), Объект);
	
	Попытка
		Адрес = ПоместитьВоВременноеХранилище(ТекущийОбъект);
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке поместить объект во временное хранилище произошла ошибка:
			|%1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
		ВызватьИсключение ТекстИсключения;	
	КонецПопытки;
	
	Возврат Адрес;
	
КонецФункции

// Возвращает объект из временного хранилища.
//
// Параметры:
//  АдресВременногоХранилищ - Строка - адрес временного хранилища с объектом. 
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ОбъектИзВременногоХранилища(АдресВременногоХранилища) Экспорт

	Попытка
		Объект = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке получить объект из временного хранилища произошла ошибка:
			|%1'"),
			КраткоеПредставлениеОшибки(ОписаниеОшибки()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Объект;
		
КонецФункции

#КонецОбласти

#Область РаботаСАлгоритмами

// Выполняет проивольный код на сервере.
//
//  Возвращает структуру результата выполнения:
//	* Результат 		- Неопределено, Произвольный 	- Неопределено, если ВернутьРезультат = Ложь;
//												  		  Произвольный - результа выполнения функции;
//	* Успешно			- Булево						- признак успешного выполнения метода;
//	* ОписаниеОшибки 	- Строка						- описание ошибки при выполнения метода.
//
// Параметры:
//  ТекстКода			- Строка 		- выполняемый произвольный код. Не должен содержать процедуры и функции и оператор Возврат;
//  Параметры		 	- Проивзольный 	- произвольный параметр. Для использования, 
//										  в выполняемом тексте кода должно быть обращение к переменной Параметры;
//  ВернутьРезультат 	- Булево 		- вернуть результат выполнения произвольного кода. Для использования,
//										  в выполняемом тексте кода должно быть помещено некоторое значение в переменную Результат.
// 
// Возвращаемое значение:
//   - Структура 
//
Функция ВыполнитьПроизвольныйКодНаСервере(ТекстКода, Параметры = Неопределено, ВернутьРезультат = Ложь) Экспорт
	
	Результат = Неопределено;
	
	ДанныеРезультата = Новый Структура;
	ДанныеРезультата.Вставить("Результат", 		Неопределено);
	ДанныеРезультата.Вставить("Успешно", 		Истина);
	ДанныеРезультата.Вставить("ОписаниеОшибки", "");
	    
	Попытка
		Выполнить(ТекстКода);		
		Если ВернутьРезультат Тогда
			ДанныеРезультата.Результат = Результат;
		КонецЕсли;
	Исключение
		ДанныеРезультата.Успешно 		= Ложь;
		ДанныеРезультата.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДанныеРезультата;
	
КонецФункции

// Выполняет экспортную процедуру или функцию на сервере.
//
//  Возвращает структуру результата выполнения:
//	* Результат 		- Неопределено, Произвольный 	- Неопределено, если ВернутьРезультат = Ложь;
//												  		  Произвольный - результа выполнения функции;
//	* Успешно			- Булево						- признак успешного выполнения метода;
//	* ОписаниеОшибки 	- Строка						- описание ошибки при выполнения метода.
//
// Параметры:
//  ИмяМетода			- Строка - полное имя выполняемой процедуры или функции;
//  Параметры		 	- Массив - массив значений параметров функции. Элементы массив должны быть
//								   отсортированны в том порядке, в котором они должны быть 
//								   в качестве параметров выполняемого метода;
//  ВернутьРезультат 	- Булево - обратиться к методу как к функции для получения возвращаемого значения.
// 
// Возвращаемое значение:
//   - Структура 
//
Функция ВыполнитьМетодНаСервере(ИмяМетода, Параметры = Неопределено, ВернутьРезультат = Ложь) Экспорт

	СтрокаПараметров 		= ОбщегоНазначенияКлиентСервер.СтрокаЭлементовМассива(Параметры, "Параметры");
	ИмяМетодаСПараметрами 	= СтрШаблон("%1(%2)", ИмяМетода, СтрокаПараметров);
	СтрокаКоманды			= ?(ВернутьРезультат, "Результат = " + ИмяМетодаСПараметрами, ИмяМетодаСПараметрами); 
	
	ДанныеРезультата = ВыполнитьПроизвольныйКодНаСервере(СтрокаКоманды, Параметры, ВернутьРезультат);
	
	Возврат ДанныеРезультата;
		
КонецФункции	
	
#КонецОбласти

#Область РаботаСРегламентнымиЗаданиями
	
// Переключает использование регламентного задания.
//
// Параметры:
//  ДанныеРегламентногоЗадания	- РегламентноеЗадание, ОбъектМетаданных, Строка - объект регламентного задания, объект метаданных 
//																				  или имя регламентного задания; 
//  Значение					- Булево										- значение использования.
//
Процедура ПереключитьИспользованиеРегламентногоЗадания(ДанныеРегламентногоЗадания, Значение) Экспорт
	
	// Проверка и преобразование параметров процедуры. 
	МассивРегламентныхЗаданий = Новый Массив;
	Если ТипЗнч(ДанныеРегламентногоЗадания) = Тип("РегламентноеЗадание") Тогда
		МассивРегламентныхЗаданий.Добавить(ДанныеРегламентногоЗадания);
	Иначе
		НайденныеРегламентныеЗадания = РегламентныеЗаданияПоИмени(ДанныеРегламентногоЗадания);
		Если ТипЗнч(НайденныеРегламентныеЗадания) = Тип("РегламентноеЗадание") Тогда					
			МассивРегламентныхЗаданий.Добавить(НайденныеРегламентныеЗадания);
		Иначе
			МассивРегламентныхЗаданий = НайденныеРегламентныеЗадания;
		КонецЕсли;
	КонецЕсли;
	
	ВыводитьИндентификатор 	= МассивРегламентныхЗаданий.Количество() > 1;
	ТекстТекущегоЗначения	= ?(Значение, НСтр("ru = 'Включено'"), НСтр("ru = 'Выключено'"));
	
	Для Каждого РегламентноеЗадание Из МассивРегламентныхЗаданий Цикл
		РегламентноеЗадание.Использование = Значение;
		РегламентноеЗадание.Записать();
		
		ТекстСообщения = ?(ВыводитьИндентификатор,
			СтрШаблон(НСтр("ru = '%1 использование регламентного задания %2 (идентификатор: %3)'"), 
				ТекстТекущегоЗначения, РегламентноеЗадание.Наименование, РегламентноеЗадание.УникальныйИдентификатор),
			СтрШаблон(НСтр("ru = '%1 использование регламентного задания %2'"), 
				ТекстТекущегоЗначения, РегламентноеЗадание.Наименование));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает единичный объект или массив объектов регламентных заданий по объекту метаданных или имени регламентного задания.
//
// Параметры:
//  ДанныеРегламентногоЗадания - ОбъектМетаданных, Строка - объект метаданных или имя регламентного задания. 
// 
// Возвращаемое значение:
//   - РегламентноеЗадание, Массив 
//
Функция РегламентныеЗаданияПоИмени(ДанныеРегламентногоЗадания) Экспорт
	
	ТипЗнчДанныхРегламентногоЗадания 		= ТипЗнч(ДанныеРегламентногоЗадания);
	ТипЗнчДанныхРегламентногоЗаданияСтрока	= ТипЗнчДанныхРегламентногоЗадания = Тип("Строка");
	
	// Проверка и преобразование параметров функции.
	Если ТипЗнчДанныхРегламентногоЗадания = Тип("ОбъектМетаданных") И ДанныеРегламентногоЗадания.Предопределенное Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(ДанныеРегламентногоЗадания);
		// Возврат единичного объкта регламентного задания.
		Возврат РегламентноеЗадание;				
	КонецЕсли;	
	
	// Определение непредопределенного регламентного задания.
	НаименованиеРегламентногоЗадания = ?(ТипЗнчДанныхРегламентногоЗаданияСтрока, 
		ДанныеРегламентногоЗадания, ДанныеРегламентногоЗадания.Наименование);
			
	ПараметрыОтбора 						= Новый Структура("Наименование", НаименованиеРегламентногоЗадания);
	РегламентныеЗаданияСТекущимИменем 		= РегламентныеЗадания.ПолучитьРегламентныеЗадания(ПараметрыОтбора);
	КоличествоНайденныхРегламентныхЗаданий	= РегламентныеЗаданияСТекущимИменем.Количество();
		
	Если КоличествоНайденныхРегламентныхЗаданий = 0 Тогда
		// Возврат пустого массив.
		Возврат Новый Массив;
	ИначеЕсли КоличествоНайденныхРегламентныхЗаданий = 1 Тогда
		// Возврат единичного объкта регламентного задания.
		Возврат РегламентныеЗаданияСТекущимИменем[0];
	ИначеЕсли КоличествоНайденныхРегламентныхЗаданий > 1 Тогда
		// Возврат массива объктов регламентного задания.
		Возврат РегламентныеЗаданияСТекущимИменем;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаСПараметрамиСеанса

// Устанавливает значение параметра сеанса по имени.
//
// Параметры:
//  ИмяПараметраСеанса 	- Строка 		- имя параметра сеанса в конфигурации;
//  Значение			- Произвольный	- устанавливаемое значение. Тип определяется параметром сеанса. 
//
Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметраСеанса, Значение) Экспорт
	
	Попытка
		ПараметрыСеанса[ИмяПараметраСеанса].Установить(Значение);
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке установить значение параметра сеанса по имени ""%1"" произошла ошибка:
			|%2'"), 
			ИмяПараметраСеанса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает значения для параметров сеанса по имени.
//
// Параметры:
//  СтруктураИменИЗначений - Структура - структура данных, где:
//	 * Ключ 	- имя параметра сеанса в конфигурации; 
//	 * Значение - устанавливаемое значение параметра сеанса. Тип определяется параметром сеанса.
//
Процедура УстановитьЗначенияПараметровСеанса(СтруктураИменИЗначений) Экспорт
	 
	Для Каждого ЭлементСтруктуры Из СтруктураИменИЗначений Цикл
		УстановитьЗначениеПараметраСеанса(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);		
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает значение параметра сеанса по имени.
//
// Параметры:
//  ИмяПараметраСеанса - Строка - имя параметра сеанса в конфигурации.
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ЗначениеПараметраСеанса(ИмяПараметраСеанса) Экспорт
	
	Попытка
		Значение = ПараметрыСеанса[ИмяПараметраСеанса];
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке получить значение параметра сеанса по имени ""%1"" произошла ошибка:
			|%2'"), 
			ИмяПараметраСеанса, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонстантами

// Устанавливает значение константы по имени.
//
// Параметры:
//  ИмяКонстанты 	- Строка 		- имя константы в конфигурации;
//  Значение		- Произвольный	- устанавливаемое значение. Тип определяется константой. 
//
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, Значение) Экспорт
		
	Попытка
		Константы[ИмяКонстанты].Установить(Значение);
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке установить значение константы по имени ""%1"" произошла ошибка:
			|%2'"), 
			ИмяКонстанты, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;	
	
КонецПроцедуры

// Устанавливает значения для констант по имени.
//
// Параметры:
//  СтруктураИменИЗначений - Структура - структура данных, где:
//	 * Ключ 	- имя константы в конфигурации; 
//	 * Значение - устанавливаемое значение константы. Тип определяется константой.
//
Процедура УстановитьЗначенияКонстант(СтруктураИменИЗначений) Экспорт
	
	Для Каждого ЭлементСтруктуры Из СтруктураИменИЗначений Цикл
		УстановитьЗначениеКонстанты(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение константы по имени.
//
// Параметры:
//  ИмяКонстанты - Строка - имя константы в конфигурации.
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Попытка
		Значение = Константы[ИмяКонстанты].Получить();
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке получить значение константы по имени ""%1"" произошла ошибка:
			|%2'"), 
			ИмяКонстанты, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область РаботаССылками

// Возвращает ссылку объекта по уникальному идентификатору.
//
// Параметры:
//  УникальныйИдентификатор	- УникальныйИдентификатор, Строка 	- уникальный идентификатор объекта; 
//  ИмяТаблицы				- Строка							- полное имя таблицы для поиска ссылки. Если не указано,
//																  или указано неверное, имя таблицы будет определено автоматически.
// 
// Возвращаемое значение:
//   - ЛюбаяСсылка, Неопределено
//
Функция СсылкаОбъектаПоУникальномуИдентификатору(УникальныйИдентификатор, ИмяТаблицы = Неопределено) Экспорт
	
	// Проверка и преобразование параметров функции.
	Если ТипЗнч(УникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ТекущийУникальныйИдентификатор = УникальныйИдентификатор;
	Иначе
		ТекущийУникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификатор);
	КонецЕсли;
	
	Ссылка = Неопределено;
	
	// Определение менеджеров объектов метаданных-областей поиска. 
	ИмяТаблицыУказано = ТипЗнч(ИмяТаблицы) = Тип("Строка") И Не ПустаяСтрока(ИмяТаблицы) И СтрНайти(ИмяТаблицы, ".");	
	Если ИмяТаблицыУказано Тогда
		ИменаМенеджеровОбъектовМетаданных = Новый Массив;
		Если Не Метаданные.НайтиПоПолномуИмени(ИмяТаблицы) = Неопределено Тогда
			ИмяМенеджераОбъектаМетаданных = СтрЗаменить(ИмяТаблицы, ".", "Менеджер.");
			ИменаМенеджеровОбъектовМетаданных.Добавить(ИмяМенеджераОбъектаМетаданных);
		КонецЕсли;
	Иначе
		ИменаМенеджеровОбъектовМетаданных = ОбщегоНазначенияСерверПовтИсп.ИменаМенеджеровОбъектовМетаданных();
	КонецЕсли;
	
	// Поиск ссылки в определенных менеджерах объектов метаданных.
	Для Каждого ИмяМенеджераОбъектаМетаданных Из ИменаМенеджеровОбъектовМетаданных Цикл
		МенеджерОбъектаМетаданных 	= Новый(ИмяМенеджераОбъектаМетаданных);			
		ПолученнаяСсылка 			= МенеджерОбъектаМетаданных.ПолучитьСсылку(ТекущийУникальныйИдентификатор);
		ОбъектНайден 				= Не СтрНайти(Строка(ПолученнаяСсылка), "Объект не найден");	
		Если ОбъектНайден Тогда
			Ссылка = ПолученнаяСсылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ссылка;
		
КонецФункции
	
// Возвращает уникальный идентификатор ссылки объекта.
//
// Параметры:
//  Ссылка	 - ЛюбаяСсылка 	- ссылка на объект; 
//  Строкой	 - Булево	 	- вернуть уникальный идентификатор преобразованный в строку.
// 
// Возвращаемое значение:
//   - УникальныйИдентификатор, Строка
//
Функция УникальныйИдентификаторСсылкиОбъекта(Ссылка, Строкой = Ложь) Экспорт
	
	Попытка
		УникальныйИдентификатор = Ссылка.УникальныйИдентификатор();		
	Исключение
		ТекстИсключения = СтрШаблон(НСтр("ru = 'При попытке получить уникальный идентификатор ссылки произошла ошибка:
			|%1'"), 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстИсключения;	
	КонецПопытки;
	
	УникальныйИдентификатор = ?(Строкой, Строка(УникальныйИдентификатор), УникальныйИдентификатор);
	
	Возврат УникальныйИдентификатор;
	
КонецФункции

// Возвращает значение реквизита объекта по имени.
//
// Параметры:
//  Ссылка		 - ЛюбаяСсылка	- ссылка на объект, содержащий реквизит, значение которого необходимо получить;
//  ИмяРеквизита - Строка		- имя реквизита объекта. 
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	ПутьКРеквизиту	= "Таблица." + ИмяРеквизита;
	ИмяТаблицы 		= Ссылка.Метаданные().ПолноеИмя();	
	
	// Формирование текста запроса получения значения реквизита.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Поле КАК ЗначениеРеквизита
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поле", ПутьКРеквизиту); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицы);
	
	// Формирование запроса и получение значения реквизита.
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
		
	Возврат ЗначениеРеквизита;	
		
КонецФункции

// Возвращает значения реквизитов объекта по именам.
//  
//	Возвращает структуру значений реквизитов: 
//	* Ключ 		- Строка		- имя реквизита; 
//	* Значение 	- Произвольный	- значение реквизита.
//
// Параметры:
//  Ссылка		 - ЛюбаяСсылка		- ссылка на объект, содержащий реквизиты, значения которых необходимо получить;
//  ИмяРеквизита - Строка, Массив	- перечисление имен реквизитов в строке через запятую или в массиве. 
// 
// Возвращаемое значение:
//   - Структура
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов) Экспорт
	
	// Проверка и преобразование параметров функции.
	ТекущиеИменаРеквизитов = ?(ТипЗнч(ИменаРеквизитов) = Тип("Строка"),
		ОбщегоНазначенияКлиентСервер.СтроковоеПеречислениеВМассив(ИменаРеквизитов, ","),
		ИменаРеквизитов);
			
	// Формирование текста запроса получения значений реквизитов.	
	ПутиКРеквизитам 		= Новый Массив;
	ПсевдонимыРеквизитов	= Новый Массив;
	
	Для Каждого ИмяРеквизита Из ТекущиеИменаРеквизитов Цикл
		ПсевдонимРеквизита	= ?(СтрНайти(ИмяРеквизита, "."), СтрЗаменить(ИмяРеквизита, ".", ""), ИмяРеквизита);			
		СтрокаПоляЗапроса	= СтрШаблон("	Таблица.%1 КАК %2", ИмяРеквизита, ПсевдонимРеквизита);
		
		ПутиКРеквизитам.Добавить(СтрокаПоляЗапроса);
		ПсевдонимыРеквизитов.Добавить(ПсевдонимРеквизита);
	КонецЦикла;
	
	ПутиКРеквизитам = СтрСоединить(ПутиКРеквизитам, "," + Символы.ПС);
	ИмяТаблицы 		= Ссылка.Метаданные().ПолноеИмя();
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Поля
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", ПутиКРеквизитам); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицы);
	
	// Формирование запроса и получение значений реквизитов.
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ЗначенияРеквизитов = Новый Структура;
	Для Каждого ПсевдонимРеквизита Из ПсевдонимыРеквизитов Цикл
		ЗначенияРеквизитов.Вставить(ПсевдонимРеквизита, Выборка[ПсевдонимРеквизита]);		
	КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Возвращает иерархию элемента справочника.
//
// Параметры:
//  Ссылка				- СправочникСсылка	 - ссылка на элемент справочника, иерархию которого необходимо получить;
//  СПометкойНаУдаление	- Булево			 - вернуть элементы иерархии в том числе с пометкой на удаление;
//  Массивом			- Булево			 - вернуть иерархию в виде массива или в виде таблицы значений.
//  										   При возвращении в виде таблицы значений будет добавлена колонка Порядок
//  										   с порядком элемента, где самый верхний элемент имеет порядок 1.
// 
// Возвращаемое значение:
//   - Массив, ТаблицаЗначений
//
Функция ИерархияЭлементаСправочника(Ссылка, СПометкойНаУдаление = Ложь, Массивом = Истина) Экспорт
		
	ИмяТаблицы = Ссылка.Метаданные().ПолноеИмя();

	// Формирование текста запроса получения иерархии объекта.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|	И Таблица.ПометкаУдаления = &ПометкаУдаления
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ИмяТаблицы);
	
	// Формирование запроса и получение значения реквизита.
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", СПометкойНаУдаление);
	
	ТаблицаИерархии = Запрос.Выполнить().Выгрузить();	
	Если ТаблицаИерархии.Количество() И Не ЗначениеЗаполнено(ТаблицаИерархии[0].Ссылка) Тогда
		ТаблицаИерархии.Удалить(0);
	КонецЕсли;
	
	Если Массивом Тогда
		Иерархия = ТаблицаИерархии.ВыгрузитьКолонку("Ссылка");
	Иначе
		Иерархия = ТаблицаИерархии;
		Иерархия.Колонки.Добавить("Порядок", глОписаниеЧисла(1, 0));
		
		Сч = 1;
		Для Каждого СтрокаИерархии Из Иерархия Цикл
			СтрокаИерархии.Порядок = Сч;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Иерархия;
	
КонецФункции

#КонецОбласти

#Область РаботаСУниверсальнымиКоллекциямиЗначений

// Возвращает таблицу значений с переопределенным составом колонок таблицы значений-источника.
//
// Параметры:
//  ТаблицаЗначений			- ТаблицаЗначений	- таблица значений-источник; 
//  ИменаВыгружаемыхКолонок	- Строка, Массив	- перечисление имен выгружаемых колонок в строке через запятую или в массиве;
//  ИменаИсключаемыхКолонок	- Строка, Массив	- перечисление имен не выгружаемых колонок в строке через запятую или в массиве.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений 
//
Функция ЗначенияКолонокТаблицыЗначений(ТаблицаЗначений, ИменаВыгружаемыхКолонок = "", ИменаИсключаемыхКолонок = "") Экспорт
	
	// Проверка и преобразование параметров функции.
	ТипЗнчИменаВыгружаемыхКолонок 		= ТипЗнч(ИменаВыгружаемыхКолонок);
	ТипЗнчИменаВыгружаемыхКолонокСтрока = ТипЗнчИменаВыгружаемыхКолонок = Тип("Строка");
	
	ТипЗнчИменаИсключаемыхКолонок 		= ТипЗнч(ИменаИсключаемыхКолонок);
	ТипЗнчИменаИсключаемыхКолонокСтрока = ТипЗнчИменаИсключаемыхКолонок = Тип("Строка");
	
	Если (ТипЗнчИменаВыгружаемыхКолонокСтрока И ПустаяСтрока(ИменаВыгружаемыхКолонок)
	 ИЛИ ТипЗнчИменаВыгружаемыхКолонок = Тип("Массив") И Не ИменаВыгружаемыхКолонок.Количество())
	 И (ТипЗнчИменаИсключаемыхКолонокСтрока И ПустаяСтрока(ИменаИсключаемыхКолонок)
	 ИЛИ ТипЗнчИменаИсключаемыхКолонок = Тип("Массив") И Не ИменаИсключаемыхКолонок.Количество()) Тогда
		Возврат ТаблицаЗначений;
	КонецЕсли;
	
	// Преобразование параметров функции
	ТекущиеИменаВыгружаемыхКолонок = ?(ТипЗнчИменаВыгружаемыхКолонокСтрока, 
		ОбщегоНазначенияКлиентСервер.СтроковоеПеречислениеВМассив(ИменаВыгружаемыхКолонок, ","),
		ИменаВыгружаемыхКолонок);
		
	ТекущиеИменаИсключаемыхКолонок = ?(ТипЗнчИменаИсключаемыхКолонокСтрока, 
		ОбщегоНазначенияКлиентСервер.СтроковоеПеречислениеВМассив(ИменаИсключаемыхКолонок, ","),
		ИменаИсключаемыхКолонок);
		
	// Формирование пустой итоговой таблицы значений с заданными колонками.
	ИтоговаяТаблицаЗначений = ТаблицаЗначений.СкопироватьКолонки();
		
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		Если ТекущиеИменаВыгружаемыхКолонок.Найти(ИмяКолонки) = Неопределено
		 ИЛИ Не ТекущиеИменаИсключаемыхКолонок.Найти(ИмяКолонки) = Неопределено Тогда
			ИтоговаяТаблицаЗначений.Колонки.Удалить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение итоговой таблицы значений.
	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		НоваяСтрокаИтоговойТаблицыЗначений = ИтоговаяТаблицаЗначений.Добавить();
		
		Для Каждого Колонка Из ИтоговаяТаблицаЗначений.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			НоваяСтрокаИтоговойТаблицыЗначений[ИмяКолонки] = СтрокаТаблицыЗначений[ИмяКолонки];	
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#КонецОбласти