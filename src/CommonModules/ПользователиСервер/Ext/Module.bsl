
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ПользователиСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Используемые обозначения:
// * Пользователь		- элемент справочника Пользователи;
// * Пользователь ИБ	- пользователь информационной базы.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Синхронизирует список пользователей со списком пользователей ИБ.
//
Процедура СинхронизироватьСписокПользователей() Экспорт
			
	Выборка = ВыборкаРассинхронизации();
	Пока Выборка.Следующий() Цикл
		ИдентификаторПользователяИБ 	= Выборка.ИдентификаторПользователяИБ;		
		ПользовательСсылка 				= Выборка.ПользовательСсылка;
		
		Если ИдентификаторПользователяИБ = Неопределено Тогда 
			// Пометка на удаление несопоставленного пользователя.
			КомментарийФактаИзменения = НСтр("ru = 'Помечен на удаление при синхронизации списка пользователей:
            	|пользователь не сопоставлен с пользователем информационной базы'");
			
			ПользовательОбъект = ПользовательСсылка.ПолучитьОбъект();
			ПользовательОбъект.ДополнительныеСвойства.Вставить("КомментарийФактаИзменения", КомментарийФактаИзменения);
			ПользовательОбъект.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
		ИмяПользователяИБ				= Выборка.ИмяПользователяИБ;
		ИмяПользователя					= Выборка.ИмяПользователя;
		ПользовательПомеченНаУдаление	= Выборка.ПользовательПомеченНаУдаление;	
		
		Если ПользовательСсылка = Неопределено Тогда
			// Если нет пользователя, сопоставленного с пользователем ИБ,
			// то будет создан новый пользователь, сопоставленный с этим пользователем ИБ.
			КомментарийФактаИзменения = НСтр("ru = 'Создан при синхронизации списка пользователей:
            	|пользователю информационной базы не был сопоставлен пользователь'");
			
			НовыйПользователь(ИмяПользователяИБ, ИдентификаторПользователяИБ, КомментарийФактаИзменения);
		ИначеЕсли Не ИмяПользователя = ИмяПользователяИБ ИЛИ ПользовательПомеченНаУдаление Тогда
			// - Если пользователь имеет имя, отличное от имени пользователя ИБ,
			// то имя пользователя будет синхронизированно с именем этого пользователя ИБ;
			// - Если пользователь имеет сопоставление с пользовамтелем ИБ
			// и помечен на удаление, то пометка удаления будет снята.
			КомментарийФактаИзменения = ?(ПользовательПомеченНаУдаление,
				НСтр("ru = 'Снят с пометки на удаление при синхронизации списка пользователей:
            		|пользователь сопоставлен с пользователем информационной базы'"),
				НСтр("ru = 'Обновлено имя при синхронизации списка пользователей:
            		|имя пользователя не соответствовало имени сопоставленного пользователя информационной базы'"));

			ПользовательОбъект 					= ПользовательСсылка.ПолучитьОбъект();
			ПользовательОбъект.Наименование 	= ИмяПользователяИБ;
			ПользовательОбъект.ПометкаУдаления 	= Ложь;
			ПользовательОбъект.ДополнительныеСвойства.Вставить("КомментарийФактаИзменения", КомментарийФактаИзменения);
			ПользовательОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

// Возвращает основные данные сеанса текущего пользователя.
//
//  Возвращает структуру данных сеанса текущего пользователя:
//	* Пользователь 	- СправочникСсылка.Пользователи - текущий пользователь;
//	* НомерСеанса	- Число							- номер сеанса;
//	* ИмяКомпьютера - Строка						- имя компьютера, на котором запущен сеанс;
//	* ИмяПриложения - Строка						- имя приложения сеанса.
//
// Возвращаемое значение:
//   - Структура, Неопределено
//
Функция ДанныеСеансаТекущегоПользователя() Экспорт
	
	ДанныеТекущегоПользователя = Неопределено;
	
	СеансыИБ 		= ПолучитьСеансыИнформационнойБазы();
	ТекущийСеансИБ 	= НомерСеансаИнформационнойБазы();
		
    Для Каждого СеансИБ Из СеансыИБ Цикл
		Если Не СеансИБ.НомерСеанса = ТекущийСеансИБ Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТекущегоПользователя = Новый Структура;		
		ДанныеТекущегоПользователя.Вставить("НомерСеанса",		СеансИБ.НомерСеанса);
		ДанныеТекущегоПользователя.Вставить("ИмяПриложения", 	ПредставлениеПриложения(СеансИБ.ИмяПриложения));
		ДанныеТекущегоПользователя.Вставить("ИмяКомпьютера", 	СеансИБ.ИмяКомпьютера);					
		ДанныеТекущегоПользователя.Вставить("Пользователь", 	ПараметрыСеанса.ТекущийПользователь);
		
		Прервать;
    КонецЦикла;
	
	Возврат ДанныеТекущегоПользователя;
	
КонецФункции

// Возвращает ссылку текущего пользователя, сопоставленного с пользователем ИБ.
//
// Параметры:
//	СоздатьПриОтсутствии		- Булево - создать пользователя, если текущий пользователь ИБ не имеет сопоставления с пользователем; 
//  КомментарийФактаИзменения	- Строка - комментарий к записи регистрации изменения, если будет создан новый пользователь.
//
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция ТекущийПользователь(СоздатьПриОтсутствии = Ложь, КомментарийФактаИзменения = "") Экспорт
	
	ТекущийПользовательИБ = ТекущийПользовательИБ();
	Если ПустаяСтрока(ТекущийПользовательИБ.Имя) Тогда
		// Исключение обработки пользователя информационной базы по умолчанию.
		ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		УникальныйИдентификатор = ТекущийПользовательИБ.УникальныйИдентификатор;
		ТекущийПользователь		= ПользовательПоИдентификаторуПользователяИБ(УникальныйИдентификатор, СоздатьПриОтсутствии, ТекущийПользовательИБ, КомментарийФактаИзменения); 
	КонецЕсли;
	
	Возврат ТекущийПользователь;

КонецФункции

// Возвращает текущего пользователя ИБ или его имя.
//
// Параметры:
//  ТолькоИмя - булево - вернуть только имя пользователя ИБ. 
// 
// Возвращаемое значение:
//   - ПользовательИнформационнойБазы, Строка
//
Функция ТекущийПользовательИБ(ТолькоИмя = Ложь) Экспорт
	
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ТекущийПользовательИБ = ?(ТолькоИмя, ТекущийПользовательИБ.Имя, ТекущийПользовательИБ);
	
	Возврат ТекущийПользовательИБ;
	
КонецФункции

// Возвращает ссылку пользователя по уникальному идентификатору пользователя ИБ.
//
// Параметры:
//  Идентификатор				- УникальныйИдентификатор 			- уникальный идентификатор пользователя ИБ;
//  СоздатьПриОтсутствии		- Булево 							- создать пользователя, если по уникальному  
//																	  идентификатору пользователь не был найден;
//  ПользовательИБОснование		- ПользовательИнформационнойБазы 	- пользователь ИБ, на основании данных которого
//																	  будет создан новый пользователь. Если не указан, 
//																	  то будут выбраны данные текущего пользователя ИБ;
//  КомментарийФактаИзменения	- Строка					 		- комментарий к записи регистрации изменения,
//																	  если будет создан новый пользователь.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция ПользовательПоИдентификаторуПользователяИБ(Идентификатор, СоздатьПриОтсутствии = Ложь, ПользовательИБОснование = Неопределено, КомментарийФактаИзменения = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пользователь = Выборка.Ссылка;
	ИначеЕсли СоздатьПриОтсутствии Тогда
		ПользовательИБ 	= ?(ПользовательИБОснование = Неопределено, ТекущийПользовательИБ(), ПользовательИБОснование);
		Пользователь 	= НовыйПользовательНаОснованииПользователяИБ(ПользовательИБ, КомментарийФактаИзменения);
	Иначе	
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

// Возвращает пользователя ИБ или его имя по уникальному идентификатору пользователя ИБ.
//
// Параметры:
//  Идентификатор	- УникальныйИдентификатор	- уникальный идентификатор пользователя ИБ; 
//  ТолькоИмя		- Булево					- вернуть только имя пользователя ИБ.
// 
// Возвращаемое значение:
//   - ПользовательИнформационнойБазы, Строка, Неопределено 
//
Функция ПользовательИБПоИдентификаторуПользователяИБ(Идентификатор, ТолькоИмя = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ?(ТолькоИмя, ПользовательИБ.Имя, ПользовательИБ);
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции

// Возвращает пользователя ИБ или его имя по ссылке сопоставленного пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка сопоставленного пользователя с пользователем ИБ;
//  ТолькоИмя	 - Булево						 - вернуть только имя пользователя ИБ. 
// 
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи, Строка, Неопределено
//
Функция ПользовательИБПоПользователю(Пользователь, ТолькоИмя = Ложь) Экспорт
	
	ИдентификаторПользователяИБ = ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	ПользовательИБ 				= ПользовательИБПоИдентификаторуПользователяИБ(ИдентификаторПользователяИБ, ТолькоИмя);

	Возврат ПользовательИБ;
	
КонецФункции

// Возвращает значение дополнительного свойства пользователя.
//
// Параметры:
//  Свойство			- ПланВидовХарактеристикСсылка.ДополнительныеСвойстваПользователей	- дополнительное свойство пользователя;
//  Пользователь		- СправочникСсылка.Пользователи									 	- пользователь-владелец свойства.
//  																						  Если не указан, то будет выбран текущий пользователь;
//  ЗначениеПоУмолчанию	- Произвольный														- значение по умолчанию при отсутствии дополнительного свойства.
// 
// Возвращаемое значение:
//   - Произвольный
//
Функция ЗначениеДополнительногоСвойства(Свойство, Пользователь = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ТекущийПользователь = ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияДополнительныхСвойствПользователей.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияДополнительныхСвойствПользователей КАК ЗначенияДополнительныхСвойствПользователей
		|ГДЕ
		|	ЗначенияДополнительныхСвойствПользователей.Пользователь = &Пользователь
		|	И ЗначенияДополнительныхСвойствПользователей.Свойство = &Свойство
		|	И НЕ ЗначенияДополнительныхСвойствПользователей.Свойство.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Пользователь", 	ТекущийПользователь);
	Запрос.УстановитьПараметр("Свойство", 		Свойство);
	
	Выборка 	= Запрос.Выполнить().Выбрать();
	Значение	= ?(Выборка.Следующий(), Выборка.Значение, ЗначениеПоУмолчанию);
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает значение параметра сеанса ТекущийПользователь
//
Процедура УстановитьТекущегоПользователя() Экспорт
	
	КомментарийФактаИзменения = НСтр("ru = 'Создан при при входе пользователя в программу:
		|пользователю информационной базы не был сопоставлен пользователь'");
	
	ТекущийПользователь = ТекущийПользователь(Истина, КомментарийФактаИзменения);
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда	
		ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	Иначе
		ТекущийПользовательИБ 		= ТекущийПользовательИБ();
		Роли						= Метаданные.Роли;
		РолиТекущегоПользователяИБ 	= ТекущийПользовательИБ.Роли;
		
		ВходВПрограммуЗапрещен = Не (ПустаяСтрока(ТекущийПользовательИБ.Имя)
			ИЛИ РолиТекущегоПользователяИБ.Содержит(Роли.АдминистраторСистемы)
			ИЛИ РолиТекущегоПользователяИБ.Содержит(Роли.ПолныеПрава)
			ИЛИ РолиТекущегоПользователяИБ.Содержит(Роли.УправлениеСпискомПользователей));
			
		Если ВходВПрограммуЗапрещен Тогда
			// Запрет входа в программу для неопределенного пользователя, если он 
			// не обладает правами для редактирования списка пользователей.
			ТекстИсключения = НСтр("ru = 'При определении текущего пользователя возникла ошибка, 
				|вход в программу невозможен. 
				|Обратитесь в техническую поддержку'");	
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает выборку рассинхронизированных данных между пользователями и пользователями ИБ.
// 
// Возвращаемое значение:
//   - ВыборкаИзРезультатаЗапроса
//
Функция ВыборкаРассинхронизации()
	
	// Создание таблицы значений.	
	СписокПользователейИБ = Новый ТаблицаЗначений;
	СписокПользователейИБ.Колонки.Добавить("Имя", глОписаниеСтроки(200));
	СписокПользователейИБ.Колонки.Добавить("УникальныйИдентификатор", глОписаниеУникальногоИдентификатора());
	
	// Заполнение таблицы значений.	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		ИмяПользователяИБ = ПользовательИБ.Имя;
		Если ПустаяСтрока(ИмяПользователяИБ) Тогда
			// Исключение обработки пользователя 
			// информационной базы по умолчанию.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока 						= СписокПользователейИБ.Добавить();
		НоваяСтрока.Имя 					= ИмяПользователяИБ;
		НоваяСтрока.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиИБ.Имя КАК Имя,
		|	ПользователиИБ.УникальныйИдентификатор КАК ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ втПользователиИБ
		|ИЗ
		|	&ПользователиИБ КАК ПользователиИБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втПользователиИБ.ИдентификаторПользователяИБ, НЕОПРЕДЕЛЕНО) КАК ИдентификаторПользователяИБ,
		|	втПользователиИБ.Имя КАК ИмяПользователяИБ,
		|	Пользователи.Наименование КАК ИмяПользователя,
		|	Пользователи.ПометкаУдаления КАК ПользовательПомеченНаУдаление,
		|	ЕСТЬNULL(Пользователи.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПользовательСсылка
		|ПОМЕСТИТЬ втВсеПользователи
		|ИЗ
		|	втПользователиИБ КАК втПользователиИБ
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО втПользователиИБ.ИдентификаторПользователяИБ = Пользователи.ИдентификаторПользователяИБ
		|ГДЕ
		|	НЕ ЕСТЬNULL(Пользователи.ЭтоГруппа, ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеПользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
		|	втВсеПользователи.ИмяПользователяИБ КАК ИмяПользователяИБ,
		|	втВсеПользователи.ИмяПользователя КАК ИмяПользователя,
		|	втВсеПользователи.ПользовательПомеченНаУдаление КАК ПользовательПомеченНаУдаление,
		|	втВсеПользователи.ПользовательСсылка КАК ПользовательСсылка
		|ИЗ
		|	втВсеПользователи КАК втВсеПользователи
		|ГДЕ
		|	НЕ втВсеПользователи.ИмяПользователяИБ ЕСТЬ NULL
		|	И НЕ втВсеПользователи.ИмяПользователя ЕСТЬ NULL
		|	И НЕ втВсеПользователи.ИмяПользователяИБ = втВсеПользователи.ИмяПользователя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втВсеПользователи.ИдентификаторПользователяИБ,
		|	втВсеПользователи.ИмяПользователяИБ,
		|	втВсеПользователи.ИмяПользователя,
		|	втВсеПользователи.ПользовательПомеченНаУдаление,
		|	втВсеПользователи.ПользовательСсылка
		|ИЗ
		|	втВсеПользователи КАК втВсеПользователи
		|ГДЕ
		|	НЕ втВсеПользователи.ИмяПользователяИБ ЕСТЬ NULL
		|	И НЕ втВсеПользователи.ИмяПользователя ЕСТЬ NULL
		|	И втВсеПользователи.ПользовательПомеченНаУдаление
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втВсеПользователи.ИдентификаторПользователяИБ,
		|	втВсеПользователи.ИмяПользователяИБ,
		|	втВсеПользователи.ИмяПользователя,
		|	втВсеПользователи.ПользовательПомеченНаУдаление,
		|	втВсеПользователи.ПользовательСсылка
		|ИЗ
		|	втВсеПользователи КАК втВсеПользователи
		|ГДЕ
		|	НЕ втВсеПользователи.ИмяПользователяИБ ЕСТЬ NULL
		|	И втВсеПользователи.ИмяПользователя ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втВсеПользователи.ИдентификаторПользователяИБ,
		|	втВсеПользователи.ИмяПользователяИБ,
		|	втВсеПользователи.ИмяПользователя,
		|	втВсеПользователи.ПользовательПомеченНаУдаление,
		|	втВсеПользователи.ПользовательСсылка
		|ИЗ
		|	втВсеПользователи КАК втВсеПользователи
		|ГДЕ
		|	втВсеПользователи.ИмяПользователяИБ ЕСТЬ NULL
		|	И НЕ втВсеПользователи.ИмяПользователя ЕСТЬ NULL
		|	И НЕ втВсеПользователи.ПользовательПомеченНаУдаление";

	Запрос.УстановитьПараметр("ПользователиИБ", СписокПользователейИБ);
	
	Выборка = Запрос.Выполнить().Выбрать();			
	
	Возврат Выборка;
	
КонецФункции

// Создает нового пользователя на основании пользователя ИБ и возвращает его ссылку.
//
// Параметры:
//  ПользовательИБ				- ПользовательИнформационнойБазы	- пользователь ИБ-основание;
//  КомментарийФактаИзменения	- Строка					 		- комментарий к записи регистрации изменения.
//
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция НовыйПользовательНаОснованииПользователяИБ(ПользовательИБ, КомментарийФактаИзменения = "")
	
	Имя 						= ПользовательИБ.Имя;
	ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;	
	СсылкаНовогоПользователя 	= НовыйПользователь(Имя, ИдентификаторПользователяИБ, КомментарийФактаИзменения);	
	
	Возврат СсылкаНовогоПользователя;

КонецФункции

// Создает нового пользователя и возвращает его ссылку.
//
// Параметры:
//  Имя							 - Строка					 - имя пользователя;
//  ИдентификаторПользователяИБ	 - УникальныйИдентификатор	 - уникальный идентификатор пользователя ИБ;
//  КомментарийФактаИзменения	 - Строка					 - комментарий к записи регистрации изменения.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Пользователи
//
Функция НовыйПользователь(Имя, ИдентификаторПользователяИБ, КомментарийФактаИзменения = "")
	
	НовыйПользователь 								= Справочники.Пользователи.СоздатьЭлемент();
	НовыйПользователь.Наименование 					= Имя;
	НовыйПользователь.ИдентификаторПользователяИБ 	= ИдентификаторПользователяИБ;
	НовыйПользователь.ДополнительныеСвойства.Вставить("КомментарийФактаИзменения", КомментарийФактаИзменения);
	
	Попытка			
		НовыйПользователь.Записать();			
		СсылкаНовогоПользователя = НовыйПользователь.Ссылка;
	Исключение
		СсылкаНовогоПользователя = Справочники.Пользователи.ПустаяСсылка();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'При попытке создать нового пользователя ""%1"" произошла ошибка: %2'"), 
			Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	КонецПопытки;
		
	Возврат СсылкаНовогоПользователя;		
	
КонецФункции

#КонецОбласти