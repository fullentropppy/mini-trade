
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ФормыКлиентСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает массив имен реквизитов формы объекта.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого объекта.
// 
// Возвращаемое значение:
//   - Массив 
//
Функция ИменаРеквизитов(ФормаОбъекта) Экспорт
	
	РеквизитыФормы 			= ФормаОбъекта.ПолучитьРеквизиты();
	ИменаРеквизитовФормы 	= Новый Массив;
	
	Для Каждого РеквизитыФормы Из РеквизитыФормы Цикл
		ИменаРеквизитовФормы.Добавить(РеквизитыФормы.Имя);		
	КонецЦикла;
	
	Возврат ИменаРеквизитовФормы;
	
Конецфункции

#Область ОбщиеДанныеИОформлениеФорм

// Устанавливает доступность редактирования данных на форме объекта.
//
// Параметры:
//  ФормаОбъекта		- ФормаКлиентскогоПриложения	- форма обрабатываемого объекта;
//  Значение			- Булево						- значение доступности редактирования данных на форме;
//  ПараметрыИсключения - Структура 					- структура из данных для исключения элементов из обработки.
//														  Если не указана, то будут использованы значения по умолчанию.
//														  Элементы структуры и их значения по умолчанию при отсутствии:
//	 * ИменаЭлементовИсключений				- Массив	- массив имен элементов, которые необходимо исключить из обработки. По умолчанию Неопределено;
//	 * ИсключитьКомандыЧтения				- Булево	- исключать команды чтения из обработки. По умолчанию Истина;
//	 * ИсключитьКомандыПечати				- Булево	- исключать команды печати из обработки. По умолчанию Истина;
//	 * ИсключитьКомандыСозданияНаОсновании	- Булево	- исключать команды создания на основании из обработки. По умолчанию Истина.
//
Процедура УстановитьДоступностьРедактированияДанных(ФормаОбъекта, Значение, ПараметрыИсключения = Неопределено) Экспорт
	
	// Инициализация параметров исключения обработки элементов значениями по умолчанию.
	ИменаЭлементовИсключений			= Неопределено;
	ИсключитьКомандыЧтения				= Истина;
	ИсключитьКомандыПечати				= Истина;
	ИсключитьКомандыСозданияНаОсновании = Истина;
	
	// Переопределение параметров исключения при их наличии.
	Если ТипЗнч(ПараметрыИсключения) = Тип("Структура") Тогда
		Если ПараметрыИсключения.Свойство("ИменаЭлементовИсключений") Тогда
			ИменаЭлементовИсключений = ПараметрыИсключения.ИменаЭлементовИсключений;
		КонецЕсли;
		Если ПараметрыИсключения.Свойство("ИсключитьКомандыЧтения") Тогда
			ИсключитьКомандыЧтения = ПараметрыИсключения.ИсключитьКомандыЧтения;
		КонецЕсли;
		Если ПараметрыИсключения.Свойство("ИсключитьКомандыПечати") Тогда
			ИсключитьКомандыПечати = ПараметрыИсключения.ИсключитьКомандыПечати;
		КонецЕсли;
		Если ПараметрыИсключения.Свойство("ИсключитьКомандыСозданияНаОсновании") Тогда
			ИсключитьКомандыСозданияНаОсновании = ПараметрыИсключения.ИсключитьКомандыСозданияНаОсновании;
		КонецЕсли;
	КонецЕсли;
	
	ИменаЭлементовИсключенийОпределены 		= ТипЗнч(ИменаЭлементовИсключений) = Тип("Массив") И ИменаЭлементовИсключений.Количество(); 
	ИменаВозможныхКомандЧтенияТаблицФормы 	= ?(ИсключитьКомандыЧтения, ИменаВозможныхКомандЧтенияТаблицФормы(ФормаОбъекта), Новый Массив);
	
	// Обработка элементов.
	Для Каждого Элемент Из ФормаОбъекта.Элементы Цикл
		ИмяЭлемента = Элемент.Имя;
		
 		Если ИменаЭлементовИсключенийОпределены И Не ИменаЭлементовИсключений.Найти(ИмяЭлемента) = Неопределено Тогда
		 	// Исключение элемента из обработки, если он находится в списке исключений.
			Продолжить;
		КонецЕсли;
		
		ТипЗнчЭлемента 	= ТипЗнч(Элемент);
		ЭтоКоманда 		= ТипЗнчЭлемента = Тип("КнопкаФормы");
		
		Если ЭтоКоманда
		 // Исключение элемента из обработки, если он является командой чтения.
		 И (ИсключитьКомандыЧтения И (ИмяЭлемента = "ФормаПеречитать" ИЛИ ИмяЭлемента = "ФормаПоказатьВСписке"
		 ИЛИ Не ИменаВозможныхКомандЧтенияТаблицФормы.Найти(ИмяЭлемента) = Неопределено))		 
		 // Исключение элемента из обработки, если он является командой печати. 
		 ИЛИ (ИсключитьКомандыПечати И СтрНайти(ИмяЭлемента, "Печать"))
		 // Исключение элемента из обработки, если он является командой создания на основании.
		 ИЛИ (ИсключитьКомандыСозданияНаОсновании И СтрНайти(ИмяЭлемента, "СоздатьНаОсновании")) Тогда		 
			Продолжить;
		ИначеЕсли ЭтоКоманда Тогда
			// Обработка элемента типа Команда.
			УстанавливаемоеЗначение = ?(Элемент.Доступность, Значение, Ложь);
			Элемент.Доступность 	= УстанавливаемоеЗначение;
		ИначеЕсли ТипЗнчЭлемента = Тип("ПолеФормы") ИЛИ ТипЗнчЭлемента = Тип("ТаблицаФормы") Тогда
			// Обработка элемента типа Поле или Таблица.
			УстанавливаемоеЗначение = ?(Элемент.ТолькоПросмотр, Истина, Не Значение); 
			Элемент.ТолькоПросмотр 	= УстанавливаемоеЗначение;		
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пиктограмму страницы комментария на форме объекта.
//
// Параметры:
//	ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого объекта. 
//
Процедура УстановитьКартинкуСтраницыКомментария(ФормаОбъекта) Экспорт
	
	ЕстьСущностиКомментария = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "Комментарий", "СтраницаКомментария");
	Если Не ЕстьСущностиКомментария Тогда
		Возврат;
	КонецЕсли;
	
	Картинка = ?(ПустаяСтрока(ФормаОбъекта.Объект.Комментарий), Новый Картинка, БиблиотекаКартинок.Комментарий);
	ФормаОбъекта.Элементы.СтраницаКомментария.Картинка = Картинка;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеДанныеИОформлениеФормСправочников

// Устанавливает общие данные и оформление на форме справочника.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого справочника.
//
Процедура УстановитьОбщиеДанныеИОформлениеСправочника(ФормаОбъекта) Экспорт
	
	УстановитьДоступностьРедактированияКодаСправочника(ФормаОбъекта);
	УстановитьДанныеСостоянияСправочника(ФормаОбъекта);
	
КонецПроцедуры

// Устанавливает доступность изменения кода на форме справочника.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого справочника.
//
Процедура УстановитьДоступностьРедактированияКодаСправочника(ФормаОбъекта) Экспорт
	
	ЕстьСущностиКода = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "Код");
	Если Не ЕстьСущностиКода Тогда
		Возврат;
	КонецЕсли;
	
	Свойство 									= ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеСвойстваПользователей.ИзменениеКодаСправочника");
	ЗначениеТолькоПросмотр 						= Не ПользователиВызовСервера.ЗначениеДополнительногоСвойства(Свойство,, Ложь);
	ФормаОбъекта.Элементы.Код.ТолькоПросмотр 	= ЗначениеТолькоПросмотр;
		
КонецПроцедуры

// Устанавливает пиктограмму состояния справочника на форме справочника.
//
// Параметры:
//	ФормаОбъекта 			- ФормаКлиентскогоПриложения 	- форма обрабатываемого справочника; 
//  ИменаРеквизитовФормы 	- Массив						- массив с именами реквизитов формы. Если не указано,
//															  будет выбран массив из данных параметра ФормаОбъекта.
//
Процедура УстановитьДанныеСостоянияСправочника(ФормаОбъекта, ИменаРеквизитовФормы = Неопределено) Экспорт
	
	ЕстьСущностиСостоянияОбъекта = РеквизитИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "СостояниеОбъекта",, ИменаРеквизитовФормы); 
	Если Не ЕстьСущностиСостоянияОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Объект 				= ФормаОбъекта.Объект;
	Предопределенный	= Объект.Предопределенный;
	ПометкаУдаления 	= Объект.ПометкаУдаления;
	
	Если Объект.ЭтоГруппа Тогда
		СостояниеОбъекта = ?(ПометкаУдаления, 1, ?(Предопределенный, 2, 0));
	Иначе
		СостояниеОбъекта = ?(ПометкаУдаления, 4, ?(Предопределенный, 5, 3));
	КонецЕсли;
	
	ФормаОбъекта.СостояниеОбъекта = СостояниеОбъекта;

КонецПроцедуры

// Устанавливает пиктограмму состояния справочника пользователей на форме справочника.
//
// Параметры:
//  ФормаОбъекта		 - ФормаКлиентскогоПриложения	 - форма обрабатываемог осправочника;
//  ИменаРеквизитовФормы - Массив						 - массив с именами реквизитов формы. Если не указано,
//														   будет выбран массив из данных параметра ФормаОбъекта.
//
Процедура УстановитьДанныеСостоянияСправочникаПользователей(ФормаОбъекта, ИменаРеквизитовФормы = Неопределено) Экспорт
	
	ЕстьСущностиСостоянияОбъекта = РеквизитИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "СостояниеОбъекта",, ИменаРеквизитовФормы); 
	Если Не ЕстьСущностиСостоянияОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Объект 			= ФормаОбъекта.Объект;	
	ПометкаУдаления = Объект.ПометкаУдаления;
	
	Если Объект.ЭтоГруппа Тогда
		СостояниеОбъекта = ?(ПометкаУдаления, 2, 3);
	Иначе
		СостояниеОбъекта = ?(ПометкаУдаления, 0, 1);
	КонецЕсли;
	
	ФормаОбъекта.СостояниеОбъекта = СостояниеОбъекта;

КонецПроцедуры

#КонецОбласти

#Область ОбщиеДанныеИОформлениеФормДокументов

// Устанавливает общие данные и оформление на форме документа.
//
// Параметры:
//  ФормаОбъекта 			- ФормаКлиентскогоПриложения 	- форма обрабатывамого документа;
//  ДополнительныеПараметры	- Структура						- структура данных, используемая в вызываемых процедурах и функциях текущей процедуры.
//															  Состав определяется использованием подчиненных процедур и функций.
//
Процедура УстановитьОбщиеДанныеИОформлениеДокумента(ФормаОбъекта, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Дата запрета редактирования.	
	ДатыЗапретаРедактированияВызовСервера.УстановитьДоступностьРедактированияДанныхНаФормеДокумента(ФормаОбъекта, ДополнительныеПараметры);
	
	// Основные элементы.
	Если Не ФормаОбъекта.Элементы.Дата.ТолькоПросмотр Тогда
		// Установка доступности редактирования номера документа,
		// только если доступность редактирования не ограничена
		// датой запрета редактирования.
		УстановитьДоступностьРедактированияНомераДокумента(ФормаОбъекта);
	КонецЕсли;
	
	УстановитьДанныеСостоянияДокумента(ФормаОбъекта);
	УстановитьВидимостьАвтора(ФормаОбъекта);
	УстановитьВидимостьКомандыИзмененияАвтора(ФормаОбъекта);
	УстановитьКартинкуСтраницыКомментария(ФормаОбъекта);

	// Дополнительные элементы.	
	УстановитьВидимостьОснования(ФормаОбъекта);
	УстановитьВидимостьВалюты(ФормаОбъекта);
	
КонецПроцедуры

// Устанавливает доступность изменения номера документа на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатывамого документа.
//
Процедура УстановитьДоступностьРедактированияНомераДокумента(ФормаОбъекта) Экспорт
	
	ЕстьСущностиНомера = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "Номер"); 
	Если ЕстьСущностиНомера Тогда
		Возврат;
	КонецЕсли;
	
	Свойство 									= ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеСвойстваПользователей.ИзменениеНомераДокумента");
	ЗначениеТолькоПросмотр 						= Не ПользователиВызовСервера.ЗначениеДополнительногоСвойства(Свойство,, Ложь);
	ФормаОбъекта.Элементы.Номер.ТолькоПросмотр 	= ЗначениеТолькоПросмотр;
		
КонецПроцедуры

// Устанавливает пиктограмму состояния документа на форме документа.
//
// Параметры:
//	ФормаОбъекта 			- ФормаКлиентскогоПриложения 	- форма обрабатывамого документа; 
//  ИменаРеквизитовФормы 	- Массив						- массив с именами реквизитов формы. Если не указано,
//															  будет выбран массив из данных параметра ФормаОбъекта.
//
Процедура УстановитьДанныеСостоянияДокумента(ФормаОбъекта, ИменаРеквизитовФормы = Неопределено) Экспорт
	
	ЕстьСущностиСостоянияОбъекта = РеквизитИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "СостояниеОбъекта",, ИменаРеквизитовФормы); 
	Если Не ЕстьСущностиСостоянияОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ФормаОбъекта.Объект;
	
	Если Объект.ПометкаУдаления Тогда
		СостояниеОбъекта = 13;
	ИначеЕсли Объект.Проведен Тогда
		СостояниеОбъекта = 14;
	Иначе
		СостояниеОбъекта = 12;
	КонецЕсли;
	
	ФормаОбъекта.СостояниеОбъекта = СостояниеОбъекта;
	
КонецПроцедуры

// Устанавливает видимость элементов, отвечающих за отображения автора на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого документа.
//
Процедура УстановитьВидимостьАвтора(ФормаОбъекта) Экспорт
	
	ЕстьСущностиАвтора = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "Автор");
	Если Не ЕстьСущностиАвтора Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВидимость = ЗначениеЗаполнено(ФормаОбъекта.Объект.Автор);
	ФормаОбъекта.Элементы.Автор.Видимость = ЗначениеВидимость;		
	
КонецПроцедуры

// Устанавливает видимость команды Установить себя автором на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого документа.
//
Процедура УстановитьВидимостьКомандыИзмененияАвтора(ФормаОбъекта) Экспорт
	
	ЕстьЭлементУстановкиАвторства = ЭлементФормыОбъектаСуществует(ФормаОбъекта, "ФормаУстановитьСебяАвтором");
	Если Не ЕстьЭлементУстановкиАвторства Тогда
		Возврат;
	КонецЕсли;

	Свойство 			= ПредопределенноеЗначение("ПланВидовХарактеристик.ДополнительныеСвойстваПользователей.ИзменениеАвтораДокумента");
	ЗначениеВидимости 	= ПользователиВызовСервера.ЗначениеДополнительногоСвойства(Свойство,, Ложь);
	ФормаОбъекта.Элементы.ФормаУстановитьСебяАвтором.Видимость = ЗначениеВидимости;
	
КонецПроцедуры

#КонецОбласти

#Область ЧастныеДанныеИОформлениеФормДокументов

// Устанавливает видимость элементов, отвечающих за отображения основания на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого документа.
//
Процедура УстановитьВидимостьОснования(ФормаОбъекта) Экспорт
	
	ЕстьСущностиОснования = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "Основание");
	Если Не ЕстьСущностиОснования Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВидимость 							= ЗначениеЗаполнено(ФормаОбъекта.Объект.Основание);
	ФормаОбъекта.Элементы.Основание.Видимость 	= ЗначениеВидимость;	
	
КонецПроцедуры

// Устанавливает видимость элементов, отвечающих за отображения валюты на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого документа.
//
Процедура УстановитьВидимостьВалюты(ФормаОбъекта) Экспорт
	
	ЕстьСущностиВидаЦены = РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, "ВидЦены");
	Если Не ЕстьСущностиВидаЦены Тогда
		Возврат;
	КонецЕсли;
	
	Объект 				= ФормаОбъекта.Объект;
	ЗначениеВидимость 	= ЗначениеЗаполнено(Объект.ВидЦены);
	
	ТипЗнчСсылки = ТипЗнч(Объект.Ссылка);
	Если ТипЗнчСсылки = Тип("ДокументСсылка.ПоступлениеТоваров") ИЛИ ТипЗнчСсылки = Тип("ДокументСсылка.ПродажаТоваров") Тогда
		ФормаОбъекта.Элементы.ДекорацияВалюта1.Видимость = ЗначениеВидимость;
		ФормаОбъекта.Элементы.ДекорацияВалюта2.Видимость = ЗначениеВидимость;
	ИначеЕсли ТипЗнчСсылки = Тип("ДокументСсылка.УстановкаЦенТоваров") Тогда	
		ФормаОбъекта.Элементы.ДекорацияВалюта.Видимость = ЗначениеВидимость;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость команды Провести без контроля остатков на форме документа.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого документа.
//
Процедура УстановитьВидимостьКомандыПроведенияБезКонтроляОстатков(ФормаОбъекта) Экспорт
	
	ЕстьЭлементПроведенияБезКонтроляОстатков = ЭлементФормыОбъектаСуществует(ФормаОбъекта, "ФормаПровестиБезКонтроляОстатков");
	Если Не ЕстьЭлементПроведенияБезКонтроляОстатков Тогда
		Возврат;
	КонецЕсли;

	ЗначениеВидимости = ЗапасыВызовСервера.ДоступноПроведениеБезКонтроляОстатковТоваров();
	ФормаОбъекта.Элементы.ФормаПровестиБезКонтроляОстатков.Видимость = ЗначениеВидимости;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет существование реквизита объекта и элемента формы объекта.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения	- форма обрабатываемого объекта;
//  ИмяРеквизита - Строка						- имя реквизита объекта формы объекта. У формы объекта 
//												  должен быть основной реквизит с именем Объект;
//  ИмяЭлемента	 - Строка						- имя элемента на форме объекта. Если не указано,
//												  будет выбрано значение параметра ИмяРеквизита.
// 
// Возвращаемое значение:
//   - Булево
//
Функция РеквизитОбъектаИЭлементФормыОбъектаСуществуют(ФормаОбъекта, ИмяРеквизита, ИмяЭлемента = Неопределено)
	
	ТекущееИмяЭлемента 	= ?(ИмяЭлемента = Неопределено, ИмяРеквизита, ИмяЭлемента);
	ДанныеСуществуют	= ФормаОбъекта.Объект.Свойство(ИмяРеквизита) И Не ФормаОбъекта.Элементы.Найти(ТекущееИмяЭлемента) = Неопределено; 
		
	Возврат ДанныеСуществуют;
	
КонецФункции

// Проверяет существование реквизита формы и элемента формы объекта.
//
// Параметры:
//  ФормаОбъекта		 - ФормаКлиентскогоПриложения	 - форма обрабатываемого объекта;
//  ИмяРеквизитаФормы	 - Строка						 - имя реквизита формы объекта;
//  ИмяЭлемента			 - Строка						 - имя элемента формы объекта. Если не указано,
//  													   будет выбрано значение параметра ИмяРеквизитаФормы;
//  ИменаРеквизитовФормы - Массив						 - массив с именами реквизитов формы. Если не указано,
//														   будет выбран массив из данных параметра ФормаОбъекта.
// 
// Возвращаемое значение:
//   - Булево
//
Функция РеквизитИЭлементФормыОбъектаСуществуют(ФормаОбъекта, ИмяРеквизитаФормы, ИмяЭлемента = Неопределено, ИменаРеквизитовФормы = Неопределено) 
	
	ТекущееИмяЭлемента 		= ?(ИмяЭлемента = Неопределено, ИмяРеквизитаФормы, ИмяЭлемента);
	ИменаРеквизитовФормы	= ?(ИменаРеквизитовФормы = Неопределено, ИменаРеквизитов(ФормаОбъекта), ИменаРеквизитовФормы); 
	РеквизитФормыСуществует = Не ИменаРеквизитовФормы.Найти(ИмяРеквизитаФормы) = Неопределено;
	ДанныеСуществуют		= РеквизитФормыСуществует И Не ФормаОбъекта.Элементы.Найти(ТекущееИмяЭлемента) = Неопределено;
		
	Возврат ДанныеСуществуют;	
	
КонецФункции

// Проверяет существование элемента формы объекта.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения	- форма обрабатываемого объекта;
//  ИмяЭлемента	 - Строка						- имя элемента формы объекта.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЭлементФормыОбъектаСуществует(ФормаОбъекта, ИмяЭлемента)
	
	ЭлементСуществует = Не ФормаОбъекта.Элементы.Найти(ИмяЭлемента) = Неопределено;
	Возврат ЭлементСуществует;
	
КонецФункции

// Возвращает возможные имена команд чтения формы объекта.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения - форма обрабатываемого объекта.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ИменаВозможныхКомандЧтенияТаблицФормы(ФормаОбъекта)
	
	ИменаКоманд = Новый Массив;
		
	Для Каждого Элемент Из ФормаОбъекта.Элементы Цикл
		Если Не ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			Продолжить;
		КонецЕсли;
	
		// Заполнение массива имен таблиц формы.
		ИмяТаблицы 						= Элемент.Имя;
		СтрокаКонтекстногоМенюТаблицы 	= ИмяТаблицы + "КонтекстноеМеню";
		
		ИменаКоманд.Добавить(ИмяТаблицы + "ВывестиСписок");
		ИменаКоманд.Добавить(СтрокаКонтекстногоМенюТаблицы + "ВывестиСписок");
		ИменаКоманд.Добавить(ИмяТаблицы + "ПоискПоТекущемуЗначению");
		ИменаКоманд.Добавить(СтрокаКонтекстногоМенюТаблицы + "ПоискПоТекущемуЗначению");
		ИменаКоманд.Добавить(ИмяТаблицы + "Найти");
		ИменаКоманд.Добавить(СтрокаКонтекстногоМенюТаблицы + "Найти");
		ИменаКоманд.Добавить(ИмяТаблицы + "ОтменитьПоиск");
		ИменаКоманд.Добавить(СтрокаКонтекстногоМенюТаблицы + "ОтменитьПоиск");
	КонецЦикла;

	Возврат ИменаКоманд;
	
КонецФункции

#КонецОбласти