
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ОбщегоНазначенияКлиентСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выводит сообщение пользователю.
//
// Параметры:
//  ТекстСообщения - Строка - выводимый текст сообщения.
//
Процедура СообщитьПользователю(ТекстСообщения) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
		
КонецПроцедуры

#Область РаботаСУниверсальнымиКоллекциямиЗначений

// Возвращает строку элементов массива, перечисленных обращением по индексу.
//
// Параметры:
//  Массив		- Массив - массив элементов; 
//  ИмяМассива	- Строка - имя массива как переменной.
// 
// Возвращаемое значение:
//   - Строка 
//
Функция СтрокаЭлементовМассива(Массив, ИмяМассива) Экспорт
	
	// Проверка параметров функции.
	Если Не Массив.Количество() Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
		
	Сч = 0;
	Для Каждого Элемент Из Массив Цикл
		СтрокаЭлемента = СтрШаблон("%1[%2]", ИмяМассива, Сч);
		МассивСтрок.Добавить(СтрокаЭлемента);
	КонецЦикла;
		
	СтрокаЭлементов = СтрСоединить(МассивСтрок, ", ");

	Возврат СтрокаЭлементов;
	
КонецФункции

// Заполняет массив-приемник только теми значениями массива значений, которые отсутствуют в массиве-приемнике.
//
// Параметры:
//  МассивПриемник - Массив - массив-приемник значений;
//  МассивЗначений - Массив - массив с добавляемыми значениями. 
//
Процедура ДобавитьУникальныеЗначенияВМассив(МассивПриемник, МассивЗначений) Экспорт
	
	Для Каждого Значение Из МассивЗначений Цикл
		МассивПриемникНеСодержитЗначение = МассивПриемник.Найти(Значение) = Неопределено;
		Если МассивПриемникНеСодержитЗначение Тогда
			МассивПриемник.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив, содеражщий только уникальные элементы двух массивов.
//
// Параметры:
//  Массив1 - Массив - массив 1; 
//  Массив2	- Массив - массив 2. 
// 
// Возвращаемое значение:
//   - Массив
//
Функция РазностьМассивов(Массив1, Массив2) Экспорт
	
	// Проверка параметров функции.
	Массив1Заполнен = Массив1.Количество();
	Массив2Заполнен = Массив2.Количество();
	Разность 		= Новый Массив;
	
	Если Массив1Заполнен И Не Массив2Заполнен Тогда
		Возврат Массив1;
	ИначеЕсли Не Массив1Заполнен И Массив2Заполнен Тогда
		Возврат Массив2;
	ИначеЕсли Не Массив1Заполнен И Не Массив2Заполнен Тогда
		Возврат Разность;
	КонецЕсли;
	
	Разность 		= Новый Массив;	
	ОбщиеЭлементы 	= ОбщностьМассивов(Массив1, Массив2);
	
	МаксИндексМассива1 	= Массив1Заполнен - 1;
	МаксИндексМассива2 	= Массив2Заполнен - 1;
	МаксИндексОбщности	= ОбщиеЭлементы.ВГраница();
	МаксИндекс 			= Макс(МаксИндексМассива1, МаксИндексМассива2);
	
	Если МаксИндексОбщности = МаксИндекс Тогда
		// Возврат пустого массива, если массивы идентичны.
		Возврат Разность;
	КонецЕсли;
	
	МаксИндекс = Макс(МаксИндексМассива1, МаксИндексМассива2);
	
	Для Сч = 0 По МаксИндекс Цикл
		// Обработка элементов массива 1.
		Если Сч <= МаксИндексМассива1 Тогда
			ЭлементМассива1 = Массив1[Сч];	
			ДобавитьЭлемент	= ОбщиеЭлементы.Найти(ЭлементМассива1) = Неопределено;
			Если ДобавитьЭлемент Тогда
				Разность.Добавить(ЭлементМассива1);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка элементов массива 2.
		Если Сч <= МаксИндексМассива2 Тогда
			ЭлементМассива2 = Массив2[Сч];	
			ДобавитьЭлемент	= ОбщиеЭлементы.Найти(ЭлементМассива2) = Неопределено;
			Если ДобавитьЭлемент Тогда
				Разность.Добавить(ЭлементМассива2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Разность;
	
КонецФункции

// Возвращает массив, содержащий общие элементы двух массивов.
//
// Параметры:
//  Массив1 - Массив - массив 1; 
//  Массив2	- Массив - массив 2. 
// 
// Возвращаемое значение:
//   - Массив
//
Функция ОбщностьМассивов(Массив1, Массив2) Экспорт
	
	МассивОбщихЭлементов = Новый Массив;
	
	Для Каждого ЭлементМассива1 Из Массив1 Цикл
		Массив2СодержитЭлементМассива1 = Не Массив2.Найти(ЭлементМассива1) = Неопределено;
		Если Массив2СодержитЭлементМассива1 Тогда
			МассивОбщихЭлементов.Добавить(ЭлементМассива1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОбщихЭлементов;
	
КонецФункции

// Проверяет два массива на идентичность друг другу.
//
// Параметры:
//  Массив1				- Массив - проверяемый массив 1; 
//  Массив2				- Массив - проверяемый массив 2; 
//  УчитыватьСортировку	- Булево - учитывать сортировку элементов в массивах при проверке. 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция МассивыИдентичны(Массив1, Массив2, УчитыватьСортировку = Ложь) Экспорт
	
	// Проверка параметров функции.
	Если Не Массив1.Количество() = Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивыИдентичны 	= Истина;
	Сч 					= 0;
	
	Для Каждого ЭлементМассива1 Из Массив1 Цикл
		Если УчитыватьСортировку Тогда
			// Сравнение массивов с учетом расположения элементов в них.
			ЭлементМассива2 = Массив2[Сч];
			Если Не ЭлементМассива1 = ЭлементМассива2 Тогда
				МассивыИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			Сч = Сч + 1;
		Иначе
			// Сравнение массивов на наличие одинаковых элементов в них.
			Массив2НеСодержитЭлементМассива1 = Массив2.Найти(ЭлементМассива1) = Неопределено;
			Если Массив2НеСодержитЭлементМассива1 Тогда
				МассивыИдентичны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивыИдентичны;
	
КонецФункции

// Проверяет две структуры на идентичность друг другу.
//
// Параметры:
//  Структура1 - Структура - проверяемая структура 1; 
//  Структура2 - Структура - проверяемая структура 2; 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция СтруктурыИдентичны(Структура1, Структура2) Экспорт
	
	// Проверка параметров функции.
	Если Не Структура1.Количество() = Структура2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктурыИдентичны = Истина;	
	
	Для Каждого ЭлементСтруктуры1 Из Структура1 Цикл
		ЗначениеТекущегоСвойстваСтруктуры2		= Неопределено;
		Структура2СодержитЭлементСтруктуры1 	= Структура2.Свойство(ЭлементСтруктуры1.Ключ, ЗначениеТекущегоСвойстваСтруктуры2);
		
		Если Не Структура2СодержитЭлементСтруктуры1 
		 ИЛИ Не ЭлементСтруктуры1.Значение = ЗначениеТекущегоСвойстваСтруктуры2 Тогда
			СтруктурыИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктурыИдентичны;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСтроками

// Возвращает строку, соединенную самой с собой заданное количество раз.
//
// Параметры:
//  Строка		- Строка	- повторяемая строка;
//  Множитель	- Число		- количество повторений строки, должнено быть целым положительным числом; 
//  Разделитель	- Строка	- разделитель повторяемых частей новой строки.
//
// Возвращаемое значение:
//   - Строка 
//
Функция УмноженнаяСтрока(Строка, Множитель, Разделитель = "") Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) ИЛИ Множитель < 1 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСтрок = Новый Массив;	
	Для Сч = 1 По Множитель Цикл
		МассивСтрок.Добавить(Строка);		
	КонецЦикла;
	
	УмноженнаяСтрока = СтрСоединить(МассивСтрок, Разделитель);
	
	Возврат УмноженнаяСтрока;
	
КонецФункции

// Возвращает строку с добавленными в начало заданным количеством нулей.
//
// Параметры:
//  Строка			- Строка - строка, к которой будут добавлены лидирующие нули;
//  КоличествоНулей	- Число	 - количество добавляемых в начало нулей, должно быть целым положительным числом. 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СтрокаСЛидирующимиНулями(Строка, КоличествоНулей) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) ИЛИ КоличествоНулей < 1 Тогда
		Возврат "";
	КонецЕсли;	
	
	ЛидирующиеНули 				= УмноженнаяСтрока("0", КоличествоНулей);
	СтрокаСЛидирующимиНулями 	= ЛидирующиеНули + Строка;	
	
	Возврат СтрокаСЛидирующимиНулями;
	
КонецФункции

// Возвращает строку без нулей в начале.
//
// Параметры:
//  Строка - Строка - строка, у которой будут удалены лидирующие нули.
// 
// Возвращаемое значение:
//   - Строка 
//
Функция СтрокаБезЛидирующихНулей(Строка) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат "";
	КонецЕсли;	
	
	Для Сч = 1 По СтрДлина(Строка) Цикл
		ТекущийСимвол = Сред(Строка, Сч, 1);
		Если Не ТекущийСимвол = "0" Тогда
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	НоваяСтрока = Сред(Строка, Сч);
	
	Возврат НоваяСтрока;
	
КонецФункции

// Возвращает массив из строк строкового перечисления.
//
//  Пример 1:
//	 СтроковоеПеречислениеВМассив("Значение1, Значение2, Значение3", ", ");
//	 * СтроковоеПеречисление = "Значение1, Значение2, Значение3";
//	 * Разделитель = ", ";
//   Из строкового перечисления и разделителя будут удалены пробелы, при выполнении функции 
//	 получится массив из строк: "Значение1", "Значение2", "Значение3".
//
//  Пример 2:
//	 СтроковоеПеречислениеВМассив("ПолеА/ПолеБ/ПолеВ", "/");
//	 * СтроковоеПеречисление = "ПолеА/ПолеБ/ПолеВ";
//	 * Разделитель = "/";
//   Из строкового перечисления и разделителя будут удалены пробелы (в данном примере их нет), при выполнении функции 
//	 получится массив из строк: "ПолеА", "ПолеБ", "ПолеВ".
//
// Параметры:
//  СтроковоеПеречисление	- Строка - строковое перечисление разделенное разделителем. Пробелы в строке будут удалены;
//  Разделитель				- Строка - разделитель в строковом перечислении. Пробелы в строке будут удалены.
//                                    
// Возвращаемое значение:
//   - Массив 
//
Функция СтроковоеПеречислениеВМассив(СтроковоеПеречисление, Разделитель = ",") Экспорт

	// Проверка параметров функции.
	Если ПустаяСтрока(СтроковоеПеречисление) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Удаление пробелов из значений параметров функций
	ТекущийРазделитель = СтрЗаменить(Разделитель, " ", "");	
	МассивПеречислений = СтрРазделить(СтроковоеПеречисление, ТекущийРазделитель, Ложь);
	
	Для Сч = 0 По МассивПеречислений.ВГраница() Цикл
		МассивПеречислений[Сч] = СокрЛП(МассивПеречислений[Сч]);		
	КонецЦикла;	
	
	Возврат МассивПеречислений;
	
КонецФункции

// Возвращает строковое перечисление из элементов массива.
//
//  Пример 1:
//	 МассивВСтроковоеПеречисление(Массив, ", ");
//	 * Массив = "Значение1", "Значение2", "Значение3";
//	 * Разделитель = ", ";
//   При выполнении функции получится строковое перечисление: "Значение1, Значение2, Значение3".
//
//  Пример 2:
//	 МассивВСтроковоеПеречисление(Массив, "/");
//	 * Массив = "ПолеА", "ПолеБ", "ПолеВ";
//	 * Разделитель = "/";
//    При выполнении функции получится строковое перечисление: "ПолеА/ПолеБ/ПолеВ".
//
// Параметры:
//  Массив		- Массив - массив из элементов типа Строка или других типов, поддерживающих преобразование в тип Строка.
//  Разделитель	- Строка - разделитель элементов массива в строковом перечислении.
// 
// Возвращаемое значение:
//   - Строка
//
Функция МассивВСтроковоеПеречисление(Массив, Разделитель = ", ") Экспорт
	
	// Проверка значений параметров функции.
	Если Не Массив.Количество() Тогда
		Возврат "";
	КонецЕсли;
	
	МассивКОбработке = Новый Массив;
	Для Каждого ЭлементМассива Из Массив Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") И Не ПустаяСтрока(ЭлементМассива) Тогда
			МассивКОбработке.Добавить(ЭлементМассива);
		Иначе
			Попытка
				// Попытка преобразование элемента массива в тип Строка,
				// если элемент массива является типом, отличным от Строка.
				ЭлементМассиваСтрокой = Строка(ЭлементМассива);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКОбработке.Количество() Тогда
		СтроковоеПеречисление =	СтрСоединить(МассивКОбработке, Разделитель);		
	Иначе
		СтроковоеПеречисление = "";
	КонецЕсли;
	
	Возврат СтроковоеПеречисление;
	
КонецФункции

// Проверяет строку на содержание в ней символов латиницы.
//
// Параметры:
//  Строка - Строка - проверяемая строка. 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция СтрокаСодержитЛатиницу(Строка) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СимволыЛатиницы		= СимволыЛатиницы();
	СодержитЛатиницу 	= СтрокаСодержитСимволыИзМассива(Строка, СимволыЛатиницы);
	
	Возврат СодержитЛатиницу;
		
КонецФункции

// Проверяет строку на содержание в ней символов кириллицы.
//
// Параметры:
//  Строка - Строка - проверяемая строка. 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция СтрокаСодержитКириллицу(Строка) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;

	СимволыКириллицы	= СимволыКириллицы();
	СодержитКириллицу 	= СтрокаСодержитСимволыИзМассива(Строка, СимволыКириллицы);
	
	Возврат СодержитКириллицу;	
	
КонецФункции

// Проверяет строку на содержание в ней цифр.
//
// Параметры:
//  Строка - Строка - проверяемая строка. 
// 
// Возвращаемое значение:
//   - Булево 
//
Функция СтрокаСодержитЦифры(Строка) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;

	СимволыЦифр		= СимволыЦифр();
	СодержитЦифры 	= СтрокаСодержитСимволыИзМассива(Строка, СимволыЦифр);
	
	Возврат СодержитЦифры;	
	
КонецФункции

// Проверяет строку на содержание в ней прочих символов.
//
// Параметры:
//  Строка					- Строка - проверяемая строка.
//  Пробел				 	- Булево - проверить наличие в строке символа "Пробел" (код 32);
//  НижнееПодчеркивание	 	- Буелво - проверить наличие в строке символа "Нижнее подчеркивание" (код 95).
// 
// Возвращаемое значение:
//   - Булево
//
Функция СтрокаСодержитПрочиеСимволы(Строка, Пробел = Истина, НижнееПодчеркивание = Истина) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;

	ПрочиеСимволы			= ПрочиеСимволы(Пробел);
	СодержитПрочиеСимволы 	= СтрокаСодержитСимволыИзМассива(Строка, ПрочиеСимволы);
	
	Возврат СодержитПрочиеСимволы;	
	
КонецФункции

// Проверяет наличие символов строки в массиве.
//
// Параметры:
//  Строка - Строка	- строка, содержащая проверяемые символы на вхождение в массив; 
//  Массив - Массив - массив, вхождение в который проверяются символы из строки.
// 
// Возвращаемое значение:
//   - Булево
//
Функция СтрокаСодержитСимволыИзМассива(Строка, Массив) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) ИЛИ Не Массив.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;

	СодержитСимволы = Ложь;
	
	Для Сч = 1 По СтрДлина(Строка) Цикл
		Символ 			= Сред(Строка, Сч, 1);
		ИндексСимвола 	= Массив.Найти(Символ);
		Если Не ИндексСимвола = Неопределено Тогда
			СодержитСимволы = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СодержитСимволы;
	
КонецФункции

// Проверяет строку на соответствие стандарту наименования идентификаторов.
//
//  Идентификатор - строка, содержащая только латиницу, кириллицу, цифры и нижниее подчеркивание.
//  Состав идентификатора может быть разным, но идентификатор не может начинаться с цифры.
//
// Параметры:
//  Строка			 - Строка - проверяемая строка.
//  ПроверятьПробелы - Булево - проверить пробелы в строке. Если Ложь, тогда пробел в строке
//								не будет считаться ошибкой наименования идентификатора.							
// 
// Возвращаемое значение:
//   - Булево
//
Функция СтрокаЯвляетсяИдентификатором(Строка, ПроверятьПробелы = Истина) Экспорт

	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервыйСимвол = Лев(Строка, 1);
	Если СтрокаСодержитЛатиницу(ПервыйСимвол) 
	 ИЛИ СтрокаСодержитКириллицу(ПервыйСимвол)
	 ИЛИ КодСимвола(ПервыйСимвол) = 95 Тогда
		ДопустимыйПервыйСимвол = Истина;
	Иначе
		ДопустимыйПервыйСимвол = Ложь;
	КонецЕсли;
	
	СтрокаБезПервогоСимвола 			= Прав(Строка, СтрДлина(Строка) - 1);
	ДопустимаяСтрокаБезПервогоСимвола	= Не СтрокаСодержитПрочиеСимволы(СтрокаБезПервогоСимвола, ПроверятьПробелы, Ложь); 
	
	Если ДопустимыйПервыйСимвол И ДопустимаяСтрокаБезПервогоСимвола Тогда
		ЯвляетсяИдентификатором = Истина;
	Иначе
		ЯвляетсяИдентификатором = Ложь;
	КонецЕсли;
	
	Возврат ЯвляетсяИдентификатором;
		
КонецФункции

// Преобразует строку в вид идентификатора;
//  Преобразованая строка не проверяется на соответствие идентификатору и может им не являться.
//  Идентификатор - строка, содержащая только латиницу, кириллицу, цифры и нижниее подчеркивание.
//  Состав идентификатора может быть разным, но идентификатор не может начинаться с цифры.
//
// Параметры:
//  Строка - Строка - преобразуемая в вид идентификатора строка. 
// 
// Возвращаемое значение:
//   - Строка 
//
Функция СтрокаВВидИдентификатора(Строка) Экспорт
	
	// Проверка параметров функции.
	Если ПустаяСтрока(Строка) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИдентификатора = Новый Массив;
	
	СловаСтроки = СтрРазделить(Строка, " ");
	Для Каждого Слово Из СловаСтроки Цикл
		ПервыйСимвол = Лев(Слово, 1);
		ПервыйСимвол = ВРег(ПервыйСимвол);
		
		ДлинаСлова = СтрДлина(Слово);
		Если ДлинаСлова = 1 Тогда
			ЧастиИдентификатора.Добавить(ПервыйСимвол);
			Продолжить;
		КонецЕсли;
		
		ОстальныеСимволы 	= Прав(Слово, ДлинаСлова - 1);
		Слово				= ПервыйСимвол + ОстальныеСимволы;
		
		ЧастиИдентификатора.Добавить(Слово);
	КонецЦикла;
	
	Идентификатор = СтрСоединить(ЧастиИдентификатора);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область СлучайныеЗначения

// Возвращает случайную строку.
//
// Параметры:
//  ДлинаСтроки		- Число 	- длина случайной строки, должна быть целым числом; 
//  Латиница		- Булево	- включить в состав случайной строки символы латиницы;
//  Кирилица		- Булево	- включить в состав случайной строки символы кириллицы;
//  Цифры			- Булево	- включить в состав случайной строки цифры;
//  ПрочиеСимволы	- Булево	- включить в состав случайной строки прочие символы;
// 
// Возвращаемое значение:
//   - Строка 
//
Функция СлучайнаяСтрока(ДлинаСтроки, Латиница = Истина, Кирилица = Истина, Цифры = Истина, ПрочиеСимволы = Истина) Экспорт
	
	// Проверка параметров функции.
	Если ДлинаСтроки = 0 ИЛИ Не (Латиница ИЛИ Кирилица ИЛИ Цифры ИЛИ ПрочиеСимволы) Тогда
		Возврат "";
	КонецЕсли;
	
	// Формирование массивов символов на основе кодов символов UNICODE.
	НаборыСимволов = Новый Массив;
	
	Если Латиница Тогда
		// Символы нижнего регистра.
		СимволыЛатиницыНРег = СимволыЛатиницы(, Ложь);
		НаборыСимволов.Добавить(СимволыЛатиницыНРег);
		
		// Символы верхнего регистра.
		СимволыЛатиницыВРег = СимволыЛатиницы(Ложь);
		НаборыСимволов.Добавить(СимволыЛатиницыВРег);
	КонецЕсли;
	
	Если Кирилица Тогда
		// Символы нижнего регистра.
		СимволыКириллицыНРег = СимволыКириллицы(, Ложь);
		НаборыСимволов.Добавить(СимволыКириллицыНРег);
		
		// Символы верхнего регистра.
		СимволыКириллицыВРег = СимволыКириллицы(Ложь);
		НаборыСимволов.Добавить(СимволыКириллицыВРег);
	КонецЕсли;
	
	Если Цифры Тогда
		// Символы цифр.
		НаборыСимволов.Добавить(СимволыЦифр());
	КонецЕсли;
	
	Если ПрочиеСимволы Тогда
		// Прочие символы. Например: !"№;%:?*() и т.д, кроме символа "Пробел" (код 32).
		ПрочиеСимволыБезПробела = ПрочиеСимволы(Ложь);
		НаборыСимволов.Добавить(ПрочиеСимволыБезПробела);
	КонецЕсли;
	
	// Формирование случайной строки.
	СлучайнаяСтрока	= Новый Массив;	
	
	Для Сч = 1 По ДлинаСтроки Цикл
		ИндексНабораСимволов 	= СлучайноеПоложительноеЦелоеЧисло(0, НаборыСимволов.ВГраница());
		ИндексСимволаВНаборе	= СлучайноеПоложительноеЦелоеЧисло(0, НаборыСимволов[ИндексНабораСимволов].ВГраница());
		Символ					= НаборыСимволов[ИндексНабораСимволов][ИндексСимволаВНаборе];
		СлучайнаяСтрока.Добавить(Символ);
	КонецЦикла;	
	
	СлучайнаяСтрока = СтрСоединить(СлучайнаяСтрока);
	
	Возврат СлучайнаяСтрока;
	
КонецФункции

// Возвращает случайное целое число из диапазона
//
// Параметры:
//  НижняяГраница	- Число - нижняя граница диапазона случайного числа, должна быть целым числом;
//  ВерхняяГраница	- Число - верхняя граница диапазона случайного числа, должна быть целым числом.
// 
// Возвращаемое значение:
//   - Число
//
Функция СлучайноеЦелоеЧисло(НижняяГраница, ВерхняяГраница) Экспорт
	
	// Проверка параметров функции.
	Если НижняяГраница > ВерхняяГраница 
	 ИЛИ Не НижняяГраница = Окр(НижняяГраница)
	 ИЛИ Не ВерхняяГраница = Окр(ВерхняяГраница) Тогда 
		Возврат 0;
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		Возврат НижняяГраница;
	КонецЕсли;
			
	Если НижняяГраница < 0 И ВерхняяГраница < 0 Тогда
		НижняГраницаДляГенерации 	= - ВерхняяГраница;
		ВерхняяГраницаДляГенерации 	= - НижняяГраница;
		СлучайноеЦелоеЧисло			= - СлучайноеПоложительноеЦелоеЧисло(НижняГраницаДляГенерации, ВерхняяГраницаДляГенерации); 
	ИначеЕсли НижняяГраница < 0 Тогда
		НижняГраницаДляГенерации 			= - НижняяГраница;
		ВерхняяГраницаДляГенерации 			= ?(ВерхняяГраница > НижняГраницаДляГенерации, ВерхняяГраница, НижняГраницаДляГенерации);
		СлучайноеПоложительноеЦелоеЧисло 	= СлучайноеПоложительноеЦелоеЧисло(0, ВерхняяГраницаДляГенерации);
		
		Если СлучайноеПоложительноеЦелоеЧисло = ВерхняяГраница
		 ИЛИ СлучайноеПоложительноеЦелоеЧисло > НижняГраницаДляГенерации Тогда
			СлучайноеЦелоеЧисло = СлучайноеПоложительноеЦелоеЧисло;		
		ИначеЕсли СлучайноеПоложительноеЦелоеЧисло > ВерхняяГраница Тогда
			СлучайноеЦелоеЧисло = - СлучайноеПоложительноеЦелоеЧисло;
		Иначе
			ЭтоПоложительноеЦелоеЧисло 	= СлучайноеБулево();
			СлучайноеЦелоеЧисло			= ?(ЭтоПоложительноеЦелоеЧисло, СлучайноеПоложительноеЦелоеЧисло, - СлучайноеПоложительноеЦелоеЧисло);
		КонецЕсли;		
	Иначе
		СлучайноеЦелоеЧисло = СлучайноеПоложительноеЦелоеЧисло(НижняяГраница, ВерхняяГраница);
	КонецЕсли;
		
	Возврат СлучайноеЦелоеЧисло;
	
КонецФункции

// Возвращает случайное булево значение.
// 
// Возвращаемое значение:
//   - Булево 
//
Функция СлучайноеБулево() Экспорт
	
	СлучайноеЦелоеПоложительноеЧисло 	= СлучайноеПоложительноеЦелоеЧисло(0, 1);
	СлучайноеБулево 					= Булево(СлучайноеЦелоеПоложительноеЧисло);
	
	Возврат СлучайноеБулево;
	
КонецФункции

#КонецОбласти

#Область НаборыСимволов

// Возвращает массив символов латиницы нижнего и верхнего регистра.
//
// Параметры:
//  НижнийРегистр	- Булево - включить в состав символы латиницы нижнего регистра; 
//  ВерхнийРегистр	- Булево - включить в состав символы латиницы верхнего регистра;
// 
// Возвращаемое значение:
//   - Массив
//
Функция СимволыЛатиницы(НижнийРегистр = Истина, ВерхнийРегистр = Истина) Экспорт
	
	СимволыЛатиницы = Новый Массив;
	
	Если НижнийРегистр Тогда
		// Заполнение массива символами нижнего регистра.
		Для Сч = 65 По 90 Цикл
			СимволыЛатиницы.Добавить(Символ(Сч));		
		КонецЦикла;
	КонецЕсли;
	
	Если ВерхнийРегистр Тогда
		// Заполнение массива символами верхнего регистра.
		Для Сч = 97 По 122 Цикл
			СимволыЛатиницы.Добавить(Символ(Сч));		
		КонецЦикла;
	КонецЕсли;
	
	Возврат СимволыЛатиницы;
	
КонецФункции

// Возвращает массив символов кириллицы нижнего и верхнего регистра.
//
// Параметры:
//  НижнийРегистр	- Булево - включить в состав символы кириллицы нижнего регистра; 
//  ВерхнийРегистр	- Булево - включить в состав символы кириллицы верхнего регистра;
// 
// Возвращаемое значение:
//   - Массив
//
Функция СимволыКириллицы(НижнийРегистр = Истина, ВерхнийРегистр = Истина) Экспорт
	
	СимволыКириллицы = Новый Массив;
	
	Если НижнийРегистр Тогда
		// Заполнение массива символами нижнего регистра.
		Для Сч = 1072 По 1103 Цикл
			СимволыКириллицы.Добавить(Символ(Сч));		
		КонецЦикла;
	КонецЕсли;
	
	Если ВерхнийРегистр Тогда
		// Заполнение массива символами верхнего регистра.
		Для Сч = 1040 По 1071 Цикл
			СимволыКириллицы.Добавить(Символ(Сч));		
		КонецЦикла;
	КонецЕсли;
	
	Возврат СимволыКириллицы;
	
КонецФункции

// Возвращает массив символов цифр, преобразованных в строку.
// 
// Возвращаемое значение:
//   - Массив
//
Функция СимволыЦифр() Экспорт
	
	СимволыЦифр = Новый Массив;
	
	Для Сч = 48 По 57 Цикл
		Символ = Строка(Символ(Сч));
		СимволыЦифр.Добавить(Символ);		
	КонецЦикла;
	
	Возврат СимволыЦифр;
	
КонецФункции

// Возвращает массив прочих символов.
//
// Параметры:
//  Пробел				 - Булево - включить в состав символ "Пробел" (код 32);
//  НижнееПодчеркивание	 - Буелво - включить в состав символ "Нижнее подчеркивание" (код 95).
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПрочиеСимволы(Пробел = Истина, НижнееПодчеркивание = Истина) Экспорт
	
	ПрочиеСимволы = Новый Массив;
	
	Для Сч = 32 По 47 Цикл
		Если Сч = 32 И Не Пробел Тогда
			Продолжить;
		КонецЕсли;
		ПрочиеСимволы.Добавить(Символ(Сч));
	КонецЦикла;
	
	Для Сч = 58 По 64 Цикл
		ПрочиеСимволы.Добавить(Символ(Сч));
	КонецЦикла;
	
	Для Сч = 91 По 96 Цикл
		Если Сч = 95 И Не НижнееПодчеркивание Тогда
			Продолжить;
		КонецЕсли;
		ПрочиеСимволы.Добавить(Символ(Сч));
	КонецЦикла;
	
	Для Сч = 123 По 126 Цикл
		ПрочиеСимволы.Добавить(Символ(Сч));
	КонецЦикла;
	
	Возврат ПрочиеСимволы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает случайное положительное целое число из диапазона.
//
// Параметры:
//  НижняяГраница	- Число	- нижняя граница диапазона случайного числа, должна быть целым числом; 
//  ВерхняяГраница	- Чсило - верхняя граница диапазона случайного числа, должна быть целым числом. 
// 
// Возвращаемое значение:
//   - Число 
//
Функция СлучайноеПоложительноеЦелоеЧисло(НижняяГраница, ВерхняяГраница)
	
	НачальноеЧисло = Новый УникальныйИдентификатор;
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "-", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "a", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "b", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "c", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "d", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "e", "");
	НачальноеЧисло = СтрЗаменить(НачальноеЧисло, "f", "");
	
	ГенераторСлучайныхЧисел 			= Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
	СлучайноеЦелоеПоложительноеЧисло 	= ГенераторСлучайныхЧисел.СлучайноеЧисло(НижняяГраница, ВерхняяГраница);	
	
	Возврат СлучайноеЦелоеПоложительноеЧисло;
	
КонецФункции

#КонецОбласти
