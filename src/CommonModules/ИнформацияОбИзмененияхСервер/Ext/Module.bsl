
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ИнформацияОбИзмененияхСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет сбор данных всех источников-документов для записи информации об изменениях.
//
Процедура ПолучитьДанныеДокументаДляИнформацииОбИзмененияхПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДобавитьДанныеОбъектаВДополнительныеСвойстваПередЗаписью(Источник, Истина);	
	
КонецПроцедуры

// Выполняет сбор данных всех источников-планов видов характеристик для записи информации об изменениях.
//
Процедура ПолучитьДанныеЭлементаПланаВидовХарактеристикДляИнформацииОбИзмененияхПередЗаписью(Источник, Отказ) Экспорт

	ДобавитьДанныеОбъектаВДополнительныеСвойстваПередЗаписью(Источник, Ложь);	
	
КонецПроцедуры

// Выполняет сбор данных всех источников-справочников для записи информации об изменениях.
//
Процедура ПолучитьДанныеЭлементаСправочникаДляИнформацииОбИзмененияхПередЗаписью(Источник, Отказ) Экспорт

	ДобавитьДанныеОбъектаВДополнительныеСвойстваПередЗаписью(Источник, Ложь);		
	
КонецПроцедуры

// Регистрирует факт изменения объекта в регистре сведений ИнформацияОбИзменениях;
//	
//	Регистрация по умолчанию не выполняется в режиме ОбменДанными.Загрузка = Истина.
//
//	* Для добавления комментария в регистрацию
//	  необходимо добавить дополнительное свойство объекта "КомментарийФактаИзменения";
//	* Для принудительной регистрации в режиме записи ОбменДанными.Загрузка = Истина 
//	  необходимо добавить дополнительное свойство объекта "РегистрироватьФактИзмененияПринудительно";
//	* Для пропуска регистрации в режиме штатной записи
//	  необходимо добавить дополнительное свойство объекта "НеРегистрироватьФактИзменения"
//
Процедура ИнформацияОбИзмененияхПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ЛогироватьИнформациюОбИзменениях")
	 ИЛИ (Источник.ОбменДанными.Загрузка 
	 И Не Источник.ДополнительныеСвойства.Свойство("РегистрироватьФактИзмененияПринудительно"))
	 ИЛИ Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьФактИзменения") Тогда
		Возврат;
	КонецЕсли;
	
	КомментированиеЛогированияВключено 	= ПолучитьФункциональнуюОпцию("КомментироватьИнформациюОбИзменениях");
	Комментарий							= ?(КомментированиеЛогированияВключено, КомментарийФактаИзменения(Источник), "");
	
	ЗаписьИзменения 				= РегистрыСведений.ИнформацияОбИзменениях.СоздатьМенеджерЗаписи();
	ЗаписьИзменения.Период			= ТекущаяДата();
	ЗаписьИзменения.ВременнаяМетка	= ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗаписьИзменения.Объект 			= Источник.Ссылка;
	ЗаписьИзменения.Автор			= ПараметрыСеанса.ТекущийПользователь;
	ЗаписьИзменения.Комментарий		= Комментарий;
	ЗаписьИзменения.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет данные об объекте перед его запись в дополнительные свойства с ключем ДанныеДляИнформацииОбИзменениях.
//
// Параметры:
//  Объект		- ДокументОбъект, ПланВидовХарактеристикОбъект, СправочникОбъект	- обрабатываемый объект;
//  ЭтоДокумент	- Булево															- признак принадлежности объекта к коллекции
//																					  объектов метаданных вида Документ.
//
Процедура ДобавитьДанныеОбъектаВДополнительныеСвойстваПередЗаписью(Объект, ЭтоДокумент)
	
	Если Не ПолучитьФункциональнуюОпцию("ЛогироватьИнформациюОбИзменениях") 
	 ИЛИ Не ПолучитьФункциональнуюОпцию("КомментироватьИнформациюОбИзменениях")
	 ИЛИ Объект.ДополнительныеСвойства.Свойство("НеРегистрироватьФактИзменения") Тогда
		Возврат;
	КонецЕсли;
		
	Ссылка			= Объект.Ссылка;
	ЭтоНовыйОбъект 	= Ссылка.Пустая();	
	
	ДанныеДляИнформацииОбИзменениях = Новый Структура;
	ДанныеДляИнформацииОбИзменениях.Вставить("ЭтоНовыйОбъект", 				ЭтоНовыйОбъект);
	ДанныеДляИнформацииОбИзменениях.Вставить("ЭтоДокумент", 				ЭтоДокумент);
	ДанныеДляИнформацииОбИзменениях.Вставить("ЗаписаннаяПометкаУдаления",	Ложь);
	ДанныеДляИнформацииОбИзменениях.Вставить("ЗаписаннаяПометкаПроведения", Ложь);
	
	Если Не ЭтоНовыйОбъект Тогда
		Если ЭтоДокумент Тогда
			ЗаписанныеЗначенияРеквизитов 								= ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления, Проведен");
			ДанныеДляИнформацииОбИзменениях.ЗаписаннаяПометкаУдаления	= ЗаписанныеЗначенияРеквизитов.ПометкаУдаления;		
			ДанныеДляИнформацииОбИзменениях.ЗаписаннаяПометкаПроведения	= ЗаписанныеЗначенияРеквизитов.Проведен;				
		Иначе
			ЗаписаннаяПометкаУдаления 									= ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
			ДанныеДляИнформацииОбИзменениях.ЗаписаннаяПометкаУдаления	= ЗаписаннаяПометкаУдаления;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоДокумент Тогда
		ДанныеДляИнформацииОбИзменениях.Удалить("ЗаписаннаяПометкаПроведения");
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ДанныеДляИнформацииОбИзменениях", ДанныеДляИнформацииОбИзменениях);
	
КонецПроцедуры

// Возвращает комментарий факта изменения с учетом текущего изменения состояния объекта.
//
// Параметры:
//  Объект - ДокументОбъект, ПланВидовХарактеристикОбъект, СправочникОбъект	- обрабатываемый объект.
// 
// Возвращаемое значение:
//   - Строка
//
Функция КомментарийФактаИзменения(Объект) 
	
	ДополнительныеСвойства 	= Объект.ДополнительныеСвойства;
	Комментарий 			= НСтр("ru = '<Ошибка определения комментария факта изменения>'");
	
	Если ДополнительныеСвойства.Свойство("КомментарийФактаИзменения")
	 И Не ПустаяСтрока(ДополнительныеСвойства.КомментарийФактаИзменения) Тогда
		Возврат ДополнительныеСвойства.КомментарийФактаИзменения;
	ИначеЕсли Не ДополнительныеСвойства.Свойство("ДанныеДляИнформацииОбИзменениях") 
	 ИЛИ Не ТипЗнч(ДополнительныеСвойства.ДанныеДляИнформацииОбИзменениях) = Тип("Структура") Тогда
		Уровень 	= Перечисления.УровниОшибок.Тривиальный;
		Категория	= Справочники.КатегорииОшибок.Внутрисистемная;
		Описание	= СтрШаблон(НСтр("ru = 'При определении комментария факта изменения объекта %1 произошла ошибка:
			|дополнительное свойство КомментарийФактаИзменения отсутствует или имеет неверный тип значения.'"), 
			Объект.Метаданные().ПолноеИмя());
		ИнформацияОбОшибкахСервер.ЗарегистрироватьОшибку(Уровень, Категория, Описание);
		Возврат Комментарий;
	КонецЕсли;
	 
	ДанныеОбъекта 	= Объект.ДополнительныеСвойства.ДанныеДляИнформацииОбИзменениях;	
	ЭтоНовыйОбъект	= ДанныеОбъекта.ЭтоНовыйОбъект;
		
	Если ЭтоНовыйОбъект И Объект.ПометкаУдаления Тогда
		Комментарий = НСтр("ru = 'Создан с пометкой удаления'");	
	ИначеЕсли Не ДанныеОбъекта.ЗаписаннаяПометкаУдаления И Объект.ПометкаУдаления Тогда
		Комментарий = НСтр("ru = 'Помечен на удаление'");
	ИначеЕсли ДанныеОбъекта.ЗаписаннаяПометкаУдаления И Не Объект.ПометкаУдаления Тогда
		Комментарий = ?(ДанныеОбъекта.ЭтоДокумент И Объект.Проведен,
			НСтр("ru = 'Снят с пометки на удаление и проведен'"),
			НСтр("ru = 'Снят с пометки на удаление'"));		
	ИначеЕсли ДанныеОбъекта.ЭтоДокумент Тогда
		ПроведениеБезКонтроляОстатков = ДополнительныеСвойства.Свойство("ПроведениеБезКонтроляОстатков");
		
		Если ЭтоНовыйОбъект Тогда
			Если ПроведениеБезКонтроляОстатков Тогда
				Комментарий = НСтр("ru = 'Создан с проведением без контроля остатков'");
			Иначе
				Комментарий = ?(Объект.Проведен, НСтр("ru = 'Создан с проведением'"), НСтр("ru = 'Создан'"));
			КонецЕсли;		
		Иначе
			Если ПроведениеБезКонтроляОстатков Тогда
				Комментарий = НСтр("ru = 'Проведен без контроля остатков'");			
			ИначеЕсли Не ДанныеОбъекта.ЗаписаннаяПометкаПроведения И Объект.Проведен Тогда
				Комментарий = НСтр("ru = 'Проведен'");
			ИначеЕсли ДанныеОбъекта.ЗаписаннаяПометкаПроведения И Не Объект.Проведен Тогда
				Комментарий = НСтр("ru = 'Распроведен'");
			ИначеЕсли Объект.Проведен Тогда 
				Комментарий = НСтр("ru = 'Перепроведен'");
			Иначе
				Комментарий = НСтр("ru = 'Записан'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Комментарий = ?(ЭтоНовыйОбъект, НСтр("ru = 'Создан'"), НСтр("ru = 'Записан'")); 
	КонецЕсли;
					
	Возврат Комментарий;
	
КонецФункции

#КонецОбласти