
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ДатыЗапретаРедактированияСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет даты запрета редактирования в регистре сведений Даты запрета редактирования на основании данных выборки изменений.
//
// Параметры:
//  ВыборкаИзменений - ВыборкаИзРезультатаЗапроса - выборка изменяемых данных в регистре.
//
Процедура ОбновитьДатыИзВыборкиИзменений(ВыборкаИзменений) Экспорт
	
	// Проверка параметров процедуры.
	Если Не ВыборкаИзменений.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	Пока ВыборкаИзменений.Следующий() Цикл
		МенеджерЗаписи 				= РегистрыСведений.ДатыЗапретаРедактирования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = ВыборкаИзменений.Пользователь;
		
		Если ВыборкаИзменений.УдалитьЗапись Тогда
			МенеджерЗаписи.Удалить();	
		Иначе
			МенеджерЗаписи.Дата				= ВыборкаИзменений.Дата;
			МенеджерЗаписи.ПостоянныйДоступ	= ВыборкаИзменений.ПостоянныйДоступ;
			МенеджерЗаписи.Записать(Истина);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доступность изменения данных на форме документа на основании даты документа и персональной даты запрета редактирования.
//
// Параметры:
//  ФормаОбъекта - ФормаКлиентскогоПриложения 	- форма с данными текущего объекта;
//  ПараметрыИсключения - Структура 			- структура из данных для исключения элементов из обработки.
//												  Если не указана, то будут использованы значения по умолчанию.
//												  Элементы структуры их значения по умолчанию при отсутствии:
//	 * ИменаЭлементовИсключений				- Массив	- массив имен элементов, которые необходимо исключить из обработки;
//	 * ИсключитьКомандыЧтения				- Булево	- исключить команды чтения из обработки. По умолчанию Истина;
//	 * ИсключитьКомандыПечати				- Булево	- исключить команды печати из обработки. По умолчанию Истина;
//	 * ИсключитьКомандыСозданияНаОсновании	- Булево	- исключить команды создания на основании из обработки. По умолчанию Истина.
//
Процедура УстановитьДоступностьРедактированияДанныхНаФормеДокумента(ФормаОбъекта, ПараметрыИсключения = Неопределено) Экспорт
	
	Если ФормаОбъекта.Объект.Ссылка.Пустая() 
	 ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаРедактирования") Тогда
	 	// Отмена операции, если выполняется обработка нового документа
		// или отключен функционал дат запрета редактирования.
		Возврат;
	КонецЕсли;	
	
	ПерсональнаяДата 		= ПерсональнаяДата();
	ДоступноРедактирование	= ПерсональнаяДата <= ФормаОбъекта.Объект.Дата;
	ФормыКлиентСервер.УстановитьДоступностьРедактированияДанных(ФормаОбъекта, ДоступноРедактирование, ПараметрыИсключения);
	
КонецПроцедуры

// Возвращает общую дату запрета редактирования.
// 
// Возвращаемое значение:
//   - Дата
//
Функция ОбщаяДата() Экспорт
	
	ОбщаяДата = Константы.ОбщаяДатаЗапретаРедактирования.Получить();
	ОбщаяДата = ?(ОбщаяДата = глПустаяДата(), глМаксимальнаяДата(), ОбщаяДата); 
	
	Возврат ОбщаяДата;
	
КонецФункции

// Возвращает персональную дату запрета редактирования.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого будет получена дата.
//												   Если не указан, то будет выбран текущий пользователь.
// 
// Возвращаемое значение:
//   - Дата
//
Функция ПерсональнаяДата(Пользователь = Неопределено) Экспорт
	
	ТекущийПользователь 	= ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь);
	ИерархияПользователя 	= ОбщегоНазначенияСервер.ИерархияЭлементаСправочника(ТекущийПользователь, Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИерархияПользователя.Ссылка КАК Ссылка,
		|	ИерархияПользователя.Порядок КАК Порядок
		|ПОМЕСТИТЬ втИерархияПользователя
		|ИЗ
		|	&ИерархияПользователя КАК ИерархияПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДатыЗапретаРедактирования.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
		|	втИерархияПользователя.Порядок КАК Порядок
		|ПОМЕСТИТЬ втПорядокДатЗапрета
		|ИЗ
		|	втИерархияПользователя КАК втИерархияПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыЗапретаРедактирования КАК ДатыЗапретаРедактирования
		|		ПО втИерархияПользователя.Ссылка = ДатыЗапретаРедактирования.Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОбщаяДатаЗапретаРедактирования.Значение = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|		ИНАЧЕ ОбщаяДатаЗапретаРедактирования.Значение
		|	КОНЕЦ,
		|	0
		|ИЗ
		|	Константа.ОбщаяДатаЗапретаРедактирования КАК ОбщаяДатаЗапретаРедактирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втПорядокДатЗапрета.Дата КАК Дата
		|ИЗ
		|	втПорядокДатЗапрета КАК втПорядокДатЗапрета
		|ГДЕ
		|	НЕ втПорядокДатЗапрета.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПорядокДатЗапрета.Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("ИерархияПользователя", 	ИерархияПользователя);
	Запрос.УстановитьПараметр("Пользователь", 			ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ПерсональнаяДата = Выборка.Дата;

	Возврат ПерсональнаяДата;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет даты запрета редактирования в регистре сведений Даты запрета редактирования.
//
Процедура ОбновитьДаты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаРедактирования") Тогда
		// Запись в информацию об ошибках о невыполнении действия с обновление дат запрета редактирования.
		Уровень 	= Перечисления.УровниОшибок.Тривиальный;
		Категория	= Справочники.КатегорииОшибок.ДЗР_НеиспользуемыйФункционал;
		Описание	= НСтр("ru = 'Использование дат запрета редактирования выключено.
			|Обновление дат запрета редактирования не выполнено.'");
		ИнформацияОбОшибкахСервер.ЗарегистрироватьОшибку(Уровень, Категория, Описание);
		Возврат;
	КонецЕсли;	
	
	ТекущаяОбщаяДата	= Константы.ОбщаяДатаЗапретаРедактирования.Получить();
	НоваяОбщаяДата 		= НачалоМесяца(ТекущаяДата());
	
	Если Не ТекущаяОбщаяДата = НоваяОбщаяДата Тогда
		// Запись общей даты запрета редактирования.
		Константы.ОбщаяДатаЗапретаРедактирования.Установить(НоваяОбщаяДата);
	КонецЕсли;

	// Обновление персональных дат.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыЗапретаРедактирования.Дата = &ОбщаяДата КАК УдалитьЗапись,
		|	ДатыЗапретаРедактирования.Пользователь КАК Пользователь,
		|	&ОбщаяДата КАК Дата,
		|	ДатыЗапретаРедактирования.ПостоянныйДоступ КАК ПостоянныйДоступ
		|ИЗ
		|	РегистрСведений.ДатыЗапретаРедактирования КАК ДатыЗапретаРедактирования
		|ГДЕ
		|	НЕ ДатыЗапретаРедактирования.ПостоянныйДоступ";
	
	Запрос.УстановитьПараметр("ОбщаяДата", НоваяОбщаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьДатыИзВыборкиИзменений(Выборка);
	
КонецПроцедуры

// Выполняет проверку возможности записи документа по дате запрета редактирования.
//
Процедура ПроверитьДатуПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка 
	 ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаРедактирования") Тогда
		// Отмена операции, если запись выполняется в режиме загрузки данных
		// или отключен функционал дат запрета редактирования.
		Возврат;
	КонецЕсли;
	
	ДатаЗапрета = ПерсональнаяДата();
	Если ДатаЗапрета >= Источник.Дата Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Дата документа находится в закрытом периоде, запись документа запрещена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти