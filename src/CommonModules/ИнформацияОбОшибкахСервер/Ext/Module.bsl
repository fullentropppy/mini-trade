
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Общий модуль ИнформацияОбОшибкахСервер
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает запись в регистре сведений Информация об ошибках.
//	Запись в регистре создается фоновым заданиям, для возможности корректной регистрации ошибок в транзакциях.
//
// Параметры:
//  Уровень		- ПеречислениеСсылка.УровниОшибок, Строка	- уровень ошибки. Если указан строкой,
//															  то будет выбран уровень из перечисления Уровни ошибок, найденный
//															  по переданному наименованию;
//  Категория	- СправочникСсылка.КатегорииОшибок, Строка	- категория ошибки. Если указана строкой,
//															  то будет выбрана категория из справочника Категории ошибок, найденная 
//															  по переданному наименованию или создана новая, если не найдена;												 
//  Описание	- Строка									- произвольное описание ошибки.
//
Процедура ЗарегистрироватьОшибку(Уровень, Категория, Описание) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор;
	
	// Параметры фонового задания.
	ИмяМетода		= "ИнформацияОбОшибкахСервер.ЗарегистрироватьОшибку";
	Ключ 			= Строка(Идентификатор);
	Наименование	= НСтр("ru = 'Фоновая регистрация ошибок'");
	
	// Параметры запуска фонового задания.
	ДанныеСеанса = ПользователиСервер.ДанныеСеансаТекущегоПользователя();	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Период", 		ТекущаяДата());
	ДанныеОшибки.Вставить("ВременнаяМетка", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДанныеОшибки.Вставить("Уровень", 		Уровень);
	ДанныеОшибки.Вставить("Категория", 		Категория);
	ДанныеОшибки.Вставить("НомерСеанса", 	ДанныеСеанса.НомерСеанса);
	ДанныеОшибки.Вставить("ИмяПриложения", 	ДанныеСеанса.ИмяПриложения);
	ДанныеОшибки.Вставить("ИмяКомпьютера", 	ДанныеСеанса.ИмяКомпьютера);
	ДанныеОшибки.Вставить("Пользователь", 	ДанныеСеанса.Пользователь);
	ДанныеОшибки.Вставить("Описание", 		Описание);
		
	Параметры = Новый Массив;
	Параметры.Добавить(ДанныеОшибки);
		
	// Запуск регистрации ошибки в фоновом режиме.
	ФоновыеЗадания.Выполнить("ИнформацияОбОшибкахСервер.ЗаписатьДанныеОшибки", Параметры, Ключ, Наименование);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПРограммныйИнтерфейс

// Создает запись в регистре сведений Информация об ошибках.
//
// Параметры:
//  ДанныеОшибки - Структура - структура из данных ошибки с составом свойств,
//							   аналогичному составу свойств регистра сведений
//							   Информация об ошибках.
//
Процедура ЗаписатьДанныеОшибки(ДанныеОшибки) Экспорт
	
	// Переопределение значений свойств данных ошибки.
	ДанныеОшибки.Уровень	= УровеньОшибки(ДанныеОшибки.Уровень);
	ДанныеОшибки.Категория 	= КатегорияОшибки(ДанныеОшибки.Категория);
	
	// Запись в регистр сведений.
	ЗаписьОшибки = РегистрыСведений.ИнформацияОбОшибках.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьОшибки, ДанныеОшибки);
	ЗаписьОшибки.Записать();
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает элемент перечисления Уровни ошибок по ссылке или наименованию.
//
// Параметры:
//  Уровень	- ПеречислениеСсылка.УровениОшибок, Строка - ссылка или наименование уровня ошибок. 
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.УровениОшибок  
//
Функция УровеньОшибки(Уровень)
	
	ТипЗнчУровня = ТипЗнч(Уровень);
	Если ТипЗнчУровня = Тип("ПеречислениеСсылка.УровниОшибок") Тогда
		ТекущийУровень = Уровень;
	ИначеЕсли ТипЗнчУровня = Тип("Строка") И Не ПустаяСтрока(Уровень) Тогда
		ТекущийУровень = УровеньПоНаименованию(Уровень);
	Иначе
		ТекущийУровень = Перечисления.УровниОшибок.Серьезный;
	КонецЕсли;
	
	Возврат ТекущийУровень;
	
КонецФункции

// Возвращает элемент перечисления Уровни ошибок по наименованию.
//
// Параметры:
//  Наименование	- Строка - наименование уровня ошибок. 
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.УровениОшибок  
//
Функция УровеньПоНаименованию(Наименование)
	
	Попытка
		Уровень = Перечисления.УровниОшибок[Наименование];
	Исключение
		Уровень = Перечисления.УровниОшибок.Серьезный;
	КонецПопытки;
	
	Возврат Уровень;
	
КонецФункции

// Возвращает элемент справочника Категория ошибки по ссылке или наименованию.
//  Если элемент справочника не найден, то будет создан новый, по переданному наименованию.
//
// Параметры:
//  Категория - СправочникСсылка.КатегорииОшибок, Строка - ссылка или наименование категории ошибок.
// 
// Возвращаемое значение:
//   - СправочникСсылка.КатегорииОшибок 
//
Функция КатегорияОшибки(Категория)
		
	ТипЗнчКатегории = ТипЗнч(Категория);	
	Если ТипЗнчКатегории = Тип("СправочникСсылка.КатегорииОшибок") Тогда
		ТекущаяКатегория = Категория;
	ИначеЕсли ТипЗнчКатегории = Тип("Строка") И Не ПустаяСтрока(Категория) Тогда
		ТекущаяКатегория = КатегорияПоНаименованию(Категория);		
	Иначе
		ТекущаяКатегория = Справочники.КатегорииОшибок.Неклассифицированная;	
	КонецЕсли;
	
	Возврат ТекущаяКатегория;
	
КонецФункции

// Возвращает элемент справочника Категория ошибки по наименованию.
//  Если элемент справочника не найден, то будет создан новый, по переданному наименованию.
//
// Параметры:
//  Наименование - Строка - наименование категории ошибок. 
// 
// Возвращаемое значение:
//   - СправочникСсылка.КатегорииОшибок
//
Функция КатегорияПоНаименованию(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КатегорииОшибок.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииОшибок.Неклассифицированная)
		|		ИНАЧЕ КатегорииОшибок.Ссылка
		|	КОНЕЦ КАК Ссылка,
		|	СУММА(1) КАК КоличествоОдноименных
		|ИЗ
		|	Справочник.КатегорииОшибок КАК КатегорииОшибок
		|ГДЕ
		|	КатегорииОшибок.Наименование = &Наименование
		|	И НЕ КатегорииОшибок.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА КатегорииОшибок.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КатегорииОшибок.Неклассифицированная)
		|		ИНАЧЕ КатегорииОшибок.Ссылка
		|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоОдноименных = 1 Тогда
			Категория = Выборка.Ссылка;				
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'При регистрации ошибки с наименованием категории ""%1"" возникло исключение:
				|Наименование категории ошибки среди не помеченных на удаление не укникально!'"), Наименование);
			ЗарегистрироватьОшибку(Справочники.КатегорииОшибок.Внутрисистемная, Перечисления.УровниОшибок.Серьезный, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе	
		НоваяКатегория 				= Справочники.КатегорииОшибок.СоздатьЭлемент();
		НоваяКатегория.Наименование = Наименование;
		НоваяКатегория.Родитель		= Справочники.КатегорииОшибок.Другие;
		НоваяКатегория.Записать();
		
		Категория = НоваяКатегория.Ссылка;
	КонецЕсли;		
	
	Возврат Категория;
	
КонецФункции

#КонецОбласти