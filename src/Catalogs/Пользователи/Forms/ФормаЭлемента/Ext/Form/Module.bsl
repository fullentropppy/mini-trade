
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Модуль формы
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Используемые обозначения:
// * Пользователь		- элемент справочника Пользователи;
// * Пользователь ИБ	- пользователь информационной базы.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события При чтении на сервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	ФормыКлиентСервер.УстановитьДанныеСостоянияСправочникаПользователей(ЭтаФорма);
	ФормыКлиентСервер.УстановитьКартинкуСтраницыКомментария(ЭтаФорма);	
	ЗаполнитьДанныеИУстановитьУсловноеОформление();
	
КонецПроцедуры

// Обработчик события При создании на сервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Объект.Ссылка.Пустая() Тогда
		ФормыКлиентСервер.УстановитьДанныеСостоянияСправочникаПользователей(ЭтаФорма);	
		ЗаполнитьДанныеИУстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перед записью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если АутентификацияОС И ПустаяСтрока(ПользовательОС) Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите пользователя операционной системы или запретите 
			|аутентификацию средствами операционной системы'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Перед записью на сервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеПользователяИБ 	= ПользовательИБОпределен(Истина);
	ПользовательИБОпределен = ДанныеПользователяИБ.Значение;
	ПользовательИБ 			= ДанныеПользователяИБ.Объект;	
	Если Не ПользовательИБОпределен И ТекущийОбъект.ПометкаУдаления Тогда 
		Возврат;
	Иначе
		ТекущийПользовательИБ = ?(ПользовательИБОпределен, ПользовательИБ, ПользователиИнформационнойБазы.СоздатьПользователя());	
	КонецЕсли;
	
	/////////////////////////////////////
	// Заполнение данных пользователя ИБ.
	
	// Заполнение основных данных, кроме признака защиты от опасных действий и языка. 
	ЗаполнитьЗначенияСвойств(ТекущийПользовательИБ, ЭтаФорма,, "ЗащитаОтОпасныхДействий, Язык");
	
	// Заполнение исключенных свойств.
	ТекущийПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ЗащитаОтОпасныхДействий;
	ТекущийПользовательИБ.Язык = Метаданные.Языки.Найти(Язык);
	
	// Заполнение пароля, если он был изменен.
	Если Не НовыйПароль = Неопределено Тогда
		ТекущийПользовательИБ.Пароль = НовыйПароль;
	КонецЕсли;
	
	// Заполнение списка ролей.
	Для Каждого Роль Из ДоступныеРоли Цикл
		РольОбъект = Метаданные.Роли.Найти(Роль.Значение);
		Если Роль.Пометка Тогда			
			ТекущийПользовательИБ.Роли.Добавить(РольОбъект);
		Иначе
			ТекущийПользовательИБ.Роли.Удалить(РольОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийПользовательИБ.Записать();
	
	Если Не ПользовательИБОпределен Тогда		
		// Установки связи нового пользователя с новым пользователем ИБ.
		ТекущийОбъект.ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	КонецЕсли;		
	
КонецПроцедуры

// Обработчик события После записи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УстановитьДанныеСпискаДополнительныхСвойств();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события Наименование при изменении.
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Имя = ПолноеИмя ИЛИ ПустаяСтрока(ПолноеИмя) Тогда
		ПолноеИмя = Объект.Наименование;
	КонецЕсли;	
	
	Имя = Объект.Наименование;
	
КонецПроцедуры

// Обработчик события Аутентификация стандартная при изменении.
//
&НаКлиенте
Процедура АутентификацияСтандартнаяПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовБлокаАутентификацииСтандартной(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Аутентификация ОС при изменении.
//
&НаКлиенте
Процедура АутентификацияОСПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовБлокаАутентификацииОС(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Пользователь ОС начало выбора.
//
&НаКлиенте
Процедура ПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС",, Элемент);
	
КонецПроцедуры

// Обработчик события Режим запуска при изменении.
//
&НаКлиенте
Процедура РежимЗапускаПриИзменении(Элемент)
	
	Если РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		ТекстПредупреждения = НСтр("ru = 'Программа предназначена для работы 
			|только в режиме управляемого приложения!
			|В режиме обычного приложения корректная 
			|работа программы не гарантируется'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Комментарий при изменении.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ФормыКлиентСервер.УстановитьКартинкуСтраницыКомментария(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеСвойства

// Обработчик события Дополнительные свойства выбор.
//
&НаКлиенте
Процедура ДополнительныеСвойстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьПопыткуИзмененияДополнительногоСвойства();
	
КонецПроцедуры

// Обработчик события Дополнительные свойства при активизации строки.
//
&НаКлиенте
Процедура ДополнительныеСвойстваПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные 		= Элементы.ДополнительныеСвойства.ТекущиеДанные;
	ЗначениеДоступности = Не ТекущиеДанные = Неопределено И Не ТекущиеДанные.Свойство("ГруппаСвойства");
	
	// Командная панель
	ЭлементыКоманднойПанели = Элементы.ДополнительныеСвойства.КоманднаяПанель.ПодчиненныеЭлементы;
	КнопкиКоманднойПанели 	= ЭлементыКоманднойПанели.ДополнительныеСвойстваОсновныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКоманднойПанели.ДополнительныеСвойстваИзменитьДополнительноеСвойство.Доступность 	= ЗначениеДоступности;
	КнопкиКоманднойПанели.ДополнительныеСвойстваУбратьДополнительноеСвойство.Доступность	= ЗначениеДоступности;
	
	// Контекстное меню
	ЭлементыКонтекстногоМеню 	= Элементы.ДополнительныеСвойства.КонтекстноеМеню.ПодчиненныеЭлементы;
	КнопкиКонтекстногоМеню		= ЭлементыКонтекстногоМеню.ДополнительныеСвойстваКонтекстноеМенюОсновныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКонтекстногоМеню.ДополнительныеСвойстваКонтекстноеМенюИзменитьДополнительноеСвойство.Доступность 	= ЗначениеДоступности;
	КнопкиКонтекстногоМеню.ДополнительныеСвойстваКонтекстноеМенюУбратьДополнительноеСвойство.Доступность	= ЗначениеДоступности;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команда Установить пароль (страница Основное);
//  Открывает форму установки пароля пользователя.
//
&НаКлиенте
Процедура УстановитьПароль(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДействиеИзКарточкиПользователя");
	ПараметрыФормы.Вставить("ПарольУстановлен", ПарольУстановлен);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПарольЗавершение", ЭтаФорма);	
	
	ОткрытьФорму("Обработка.ПерсональныеНастройки.Форма.ИзменениеПароля", ПараметрыФормы, ЭтаФОрма,,,, ОписаниеОповещения);	
	
КонецПроцедуры

// Команда Добавить (страница Дополнительные свойства);
//  Открывает форму добавления дополнительного свойства пользователя.
//
&НаКлиенте
Процедура ДобавитьДополнительноеСвойство(Команда)
	
	ИмяПолучаемойФормы								= "РегистрСведений.ЗначенияДополнительныхСвойствПользователей.ФормаЗаписи"; 
	Форма 											= ПолучитьФорму(ИмяПолучаемойФормы,, ЭтаФорма);
	Форма.Запись.Пользователь 						= Объект.Ссылка;
	Форма.Элементы.Пользователь.ТолькоПросмотр 		= Истина;
	Форма.Элементы.Пользователь.ПропускатьПриВводе  = Истина;
	Форма.Открыть();
	
КонецПроцедуры

// Команда Убрать (страница Дополнительные свойства);
//  Удаляет дополнительное свойство пользователя.
//
&НаКлиенте
Процедура УбратьДополнительноеСвойство(Команда)
	
	ТекущиеДанные = Элементы.ДополнительныеСвойства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Свойство", ТекущиеДанные.Свойство); 
	ОписаниеОповещения 		= Новый ОписаниеОповещения("УбратьДополнительноеСвойствоПослеОтвета", ЭтаФорма, ДополнительныеПараметры);
	ТекстВопроса			= НСтр("ru = 'Убрать дополнительное свойство?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

// Команда Изменить (страница Дополнительные свойства);
//  Открывает форму редактирования дополнительного свойства пользователя.
//
&НаКлиенте
Процедура ИзменитьДополнительноеСвойство(Команда)
	
	ОбработатьПопыткуИзмененияДополнительногоСвойства();		
	
КонецПроцедуры

// Команда Персональные настройки пользователя;
//  Открывает обработку Персональные настройки.
//
&НаКлиенте
Процедура ОткрытьНастройкиПользователя(Команда)
	
	Если Не ПользовательИБОпределен() Тогда
		ТекстПредупреждения = НСтр("ru = 'Пользователь информационной базы не идентифицирован!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИндивидуальнаяНастройка");
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПерсональныеНастройки.Форма.ПерсональныеНастройки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// Команда Удалить пользователя информационной базы;
//  Удаляет сопоставленного пользователя ИБ, помечает на удаление текущего пользователя.
//
&НаКлиенте
Процедура УдалитьПользователяИБ(Команда)
	  
	Если Не ПользовательИБОпределен() Тогда
		ТекстПредупреждения = НСтр("ru = 'Пользователь информационной базы не идентифицирован!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения 	= Новый ОписаниеОповещения("УдалитьПользователяИБПослеОтвета", ЭтаФорма);
	ТекстВопроса		= НСтр("ru = 'Пользователь информационной базы будет удален безвозвратно,
		|текущий пользователь будет помечен на удаление. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общее

// Завершение выполнения обработчика УдалитьПользователя. 
//
&НаКлиенте
Процедура УдалитьПользователяИБПослеОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьПользователяИБНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сопоставленного пользователя ИБ и помечает на удаление текущего пользователя.
//
&НаСервере
Процедура УдалитьПользователяИБНаСервере()
	
	ПользовательИБ = ПользователиСервер.ПользовательИБПоИдентификаторуПользователяИБ(Объект.ИдентификаторПользователяИБ);
	
	Попытка
		ПользовательИБ.Удалить();
	    Объект.ПометкаУдаления = Истина;
		Записать();
		
		ФормыКлиентСервер.УстановитьДанныеСостоянияСправочникаПользователей(ЭтаФорма);
		ЗаполнитьДанныеИУстановитьУсловноеОформление();
	Исключение
		ТекстСообщения = НСтр("ru = 'При попытке удаление пользователя информационной базы "
			+ "и пометке текущего пользователя на удаление возникла ошибка: '") + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки
	
КонецПроцедуры

// Заполняет данные пользователя ИБ и устанавливает условное оформление формы.
//
&НаСервере
Процедура ЗаполнитьДанныеИУстановитьУсловноеОформление()
	
	ДанныеПользователяИБ 	= ПользовательИБОпределен(Истина);
	ПользовательИБОпределен = ДанныеПользователяИБ.Значение;
	ПользовательИБ 			= ДанныеПользователяИБ.Объект;
	
	НовыйПароль = Неопределено;
	
	Если ПользовательИБОпределен ИЛИ Не Объект.ПометкаУдаления Тогда
		Если ПользовательИБОпределен Тогда
			ДатаЗапретаРедактирования = ДатыЗапретаРедактированияСервер.ПерсональнаяДата(Объект.Ссылка);
			
			// Заполнение основных данных пользователя ИБ.
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПользовательИБ,, "ЗащитаОтОпасныхДействий");
			ЗащитаОтОпасныхДействий = ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
			
			Если Не Объект.Наименование = Имя Тогда
				ИмяРассинхронизировано = Истина;
				// Синхронизация имени пользователя 
				// с именем пользователя ИБ.
				Объект.Наименование = Имя;
				Модифицированность 	= Истина;
			КонецЕсли;
		Иначе
			ПарольУстановлен = Ложь; 	
		КонецЕсли;
				
		УстановитьУсловноеОформлениеБлокаПароля();
		ЗаполнитьСписокРолей(ПользовательИБ);
		ЗаполнитьСпискиВыбораЯзыкаИРежимаЗапуска(ПользовательИБОпределен);
		
		ЗначениеВидимости 	= Истина;
		ЗаголовокИмени		= НСтр("ru = 'Имя (для входа)'");
	Иначе	
		ЗначениеВидимости 	= Ложь;
		ЗаголовокИмени		= НСтр("ru = 'Имя'");
	КонецЕсли;
		
	УстановитьУсловноеОформлениеПредупреждения(ПользовательИБОпределен);
		
	// Установка видимости ключевых элементов формы.
	Элементы.Страницы.ТекущаяСтраница 						= Элементы.СтраницаОсновного;
	Элементы.ГруппаОсновныхДанныхПользователяИБ.Видимость 	= ЗначениеВидимости;	
	Элементы.СтраницаДоступныхРолей.Видимость 				= ЗначениеВидимости;
	Элементы.СтраницаДополнительныеСвойства.Видимость		= ЗначениеВидимости;
	Элементы.СтраницаДополнительного.Видимость 				= ЗначениеВидимости;
	
	// Прочее условное оформление.
	Элементы.Наименование.Заголовок = ЗаголовокИмени;
	УстановитьДоступностьЭлементовБлокаАутентификацииСтандартной(ЭтаФорма);
	УстановитьДоступностьЭлементовБлокаАутентификацииОС(ЭтаФорма);
	
	// Прочее.
	УстановитьДанныеСпискаДополнительныхСвойств();
	Элементы.ДатаЗапретаРедактирования.Видимость = ПользовательИБОпределен;
	
КонецПроцедуры

// Устанавливает текст предупреждения и показывает предупреждение на форме при необходимости.
//
// Параметры:
//  ПользовательИБОпределен - Булево - пользователь сопоставлен с пользователем ИБ.  
//
&НаСервере
Процедура УстановитьУсловноеОформлениеПредупреждения(ПользовательИБОпределен)
	
	Если ПользовательИБОпределен Тогда
		Видимость 	= ИмяРассинхронизировано = Истина;
		Текст		= ?(Видимость,
			НСтр("ru = 'Имя пользователя не соответствовало имени 
				|пользователя информационной базы 
            	|и было автоматически синхронизировано'"), "");
	Иначе
		Если Объект.Ссылка.Пустая() Тогда
			Видимость 	= Ложь;
			Текст		= "";
		Иначе
			Видимость = Истина;
			Если Объект.ПометкаУдаления Тогда
				Текст = НСтр("ru = 'Пользователь информационной базы не идентифицирован!
                	|Для создания нового пользователя информационной базы на основании 
                    |текущего пользователя необходимо снять пометку на удаление'");	
			Иначе
				Текст = НСтр("ru = 'Пользователь информационной базы не идентифицирован! 
                    |При записи текущего пользователя будет создан 
					|новый пользователь информационной базы'");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Элементы.ГруппаПредупреждения.Видимость 	= Видимость;
	Элементы.НадписьПредупреждения.Заголовок	= Текст;
	
КонецПроцедуры

// Проверяет существование пользователя ИБ по идентификатору пользователя ИБ текущего пользователя. 
//
// Параметры:
//  ВозвращатьПользователяИБ - Булево - возвращать данные о существовании пользователя ИБ и объект пользователя ИБ в структуре. 
// 
// Возвращаемое значение:
//   - Булево, Структура - если значение параметра ВозвращатьПользователяИБ = Истина, будет возвращена структура:
//	  * Значение	- Булево 							- проверяемый признак существования пользователя ИБ;
//	  * Объект		- ПользовательИнформационнойБазы	- пользователь ИБ.	
//
&НаСервере
Функция ПользовательИБОпределен(ВозвращатьПользователяИБ = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПользовательИБОпределен = Ложь;
	Иначе
		ПользовательИБ = ПользователиВызовСервера.ПользовательИБПоИдентификаторуПользователяИБ(Объект.ИдентификаторПользователяИБ);
		ПользовательИБОпределен = Не ПользовательИБ = Неопределено;
	КонецЕсли;	
	
	Если ВозвращатьПользователяИБ Тогда
		ИнформацияОПользователеИБ = Новый Структура();
		ИнформацияОПользователеИБ.Вставить("Значение", 	ПользовательИБОпределен);
		ИнформацияОПользователеИБ.Вставить("Объект",	ПользовательИБ);
		Возврат ИнформацияОПользователеИБ;
	Иначе
		Возврат ПользовательИБОпределен;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СтраницаОсновное

// Завершение выполнения обработчика команды Установить пароль. 
//
&НаКлиенте
Процедура УстановитьПарольЗавершение(ЗаданныйПароль, ДополнительныеПараметры) Экспорт
	
	Если ЗаданныйПароль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйПароль 		= ЗаданныйПароль;
	ПарольУстановлен 	= Не ПустаяСтрока(НовыйПароль);
	УстановитьУсловноеОформлениеБлокаПароля();
	Модифицированность = Истина;
	
КонецПроцедуры

// Устанавливает условное оформление блока пароля: текста информаии о пароле и команды установки/изменения пароля.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеБлокаПароля()
	
	Если ПарольУстановлен Тогда
		ТекстИнформации		= НСтр("ru = 'Пароль установлен'");
		ЦветИнформации 		= WebЦвета.Зеленый;	
		ЗаголовокКоманды	= НСтр("ru = 'Изменить...'");
		ПодсказкаКоманды	= НСтр("ru = 'Открыть форму изменения пароля'");
	Иначе
		ТекстИнформации		= НСтр("ru = 'Пароль не установлен'");
		ЦветИнформации 		= WebЦвета.Красный;	
		ЗаголовокКоманды	= НСтр("ru = 'Установить...'");
		ПодсказкаКоманды	= НСтр("ru = 'Открыть форму установки пароля'");
	КонецЕсли;
	
	НадписьИнформацияОПароле 			= Элементы.НадписьИнформацияОПароле;
	НадписьИнформацияОПароле.Заголовок 	= ТекстИнформации;
	НадписьИнформацияОПароле.ЦветТекста = ЦветИнформации;	
	Элементы.УстановитьПароль.Заголовок	= ЗаголовокКоманды;
	Команды.УстановитьПароль.Подсказка	= ПодсказкаКоманды;
	
КонецПроцедуры

// Устанавливает доступность подчиненных элементов блока Аутентификация 1С:Предприятия.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения 
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовБлокаАутентификацииСтандартной(ЭтаФорма)
	
	ЗначениеДоступность = ЭтаФорма.АутентификацияСтандартная;
	ЭтаФорма.Элементы.ИнформацияОПароле.Доступность			= ЗначениеДоступность;
	ЭтаФорма.Элементы.ЗапрещеноИзменятьПароль.Доступность 	= ЗначениеДоступность;
	ЭтаФорма.Элементы.ПоказыватьВСпискеВыбора.Доступность 	= ЗначениеДоступность;
	
КонецПроцедуры

// Устанавливает доступность подчиненных элементов блока Аутентификация ОС.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения 
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовБлокаАутентификацииОС(ЭтаФорма)
	
	ЗначениеДоступность = ЭтаФорма.АутентификацияОС;
	ЭтаФорма.Элементы.ПользовательОС.Доступность = ЗначениеДоступность;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаДоступныеРоли

// Заполняет список доступных ролей и устанавливает пометки.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - пользователь ИБ для установки пометок, 
//													  согласно имеющимся у него ролей.
//
&НаСервере
Процедура ЗаполнитьСписокРолей(ПользовательИБ)
	
	ДоступныеРоли.Очистить();
	Для Каждого Роль Из Метаданные.Роли Цикл
		Пометка = ?(ПользовательИБ = Неопределено, Ложь, ПользовательИБ.Роли.Содержит(Роль)); 
		ДоступныеРоли.Добавить(Роль.Имя, Роль.Представление(), Пометка);			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаДополнительныеСвойства

// Проверяет и обрабатывает попытку изменения дополнительного свойства в списке дополнительных свойств.
//
&НаКлиенте
Процедура ОбработатьПопыткуИзмененияДополнительногоСвойства()
	
	ТекущиеДанные = Элементы.ДополнительныеСвойства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Свойство("ГруппаСвойства") Тогда
		Возврат;
	КонецЕсли;

	ИмяПолучаемойФормы	= "РегистрСведений.ЗначенияДополнительныхСвойствПользователей.ФормаЗаписи";
	КлючЗаписи			= КлючЗаписиЗначенияДополнительногоСвойства(ТекущиеДанные.Свойство);
	ПараметрыФормы		= Новый Структура("Ключ", КлючЗаписи); 
	
	Форма 											= ПолучитьФорму(ИмяПолучаемойФормы, ПараметрыФормы, ЭтаФорма);
	Форма.Элементы.Пользователь.ТолькоПросмотр 		= Истина;
	Форма.Элементы.Пользователь.ПропускатьПриВводе  = Истина;
	Форма.Открыть();		
	
КонецПроцедуры

// Завершение выполнения обработчика УбратьДополнительноеСвойство. 
//
&НаКлиенте
Процедура УбратьДополнительноеСвойствоПослеОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УбратьДополнительноеСвойствоНаСервере(ДополнительныеПараметры);
		Элементы.ДополнительныеСвойства.Обновить();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет запись с дополнительным свойством пользователя в регистре сведений Значения дополнительных свойств пользователей.
//
// Параметры:
//  ПараметрыСвойства - Структура - данные удаляемой записи. 
//
&НаСервере
Процедура УбратьДополнительноеСвойствоНаСервере(ПараметрыСвойства)
	
	МенеджерЗаписи 				= РегистрыСведений.ЗначенияДополнительныхСвойствПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Объект.Ссылка;
	МенеджерЗаписи.Свойство		= ПараметрыСвойства.Свойство;
	МенеджерЗаписи.Удалить();
		
КонецПроцедуры

// Устанавливает данные динамического списка Дополнительные свойства.
//
&НаСервере
Процедура УстановитьДанныеСпискаДополнительныхСвойств()

	ДополнительныеСвойства.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Объект.Ссылка);
	
	ЗначениеДоступности = Не Объект.Ссылка.Пустая();
	Элементы.СтраницаДополнительныеСвойства.Доступность = ЗначениеДоступности;

КонецПроцедуры

// Возвращает ключ записи регистра сведений Значения дополнительных свойств пользователей выбранного дополнительного свойства.
//
// Параметры:
//  Свойство - ПланыВидовХарактеристики.ДополнительныеСвойстваПользователей - дополнительное свойство текущего пользователя.
// 
// Возвращаемое значение:
//   - РегистрСведенийКлючЗаписи.ЗначенияДополнительныхСвойствПользователей
//
&НаСервере
Функция КлючЗаписиЗначенияДополнительногоСвойства(Свойство)
	
	ЗначениеКлюча = Новый Структура();
	ЗначениеКлюча.Вставить("Пользователь", 	Объект.Ссылка);
	ЗначениеКлюча.Вставить("Свойство", 		Свойство);
	
	КлючЗаписи = РегистрыСведений.ЗначенияДополнительныхСвойствПользователей.СоздатьКлючЗаписи(ЗначениеКлюча);
	
	Возврат КлючЗаписи;
	
КонецФункции

#КонецОбласти

#Область СтраницаДополнительно

// Заполняет список выбора языка интерфейса и режима запуска приложения.
//
// Параметры:
//  ПользовательИБОпределен - Булево - пользователь сопоставлен с пользователем ИБ.  
//
&НаСервере
Процедура ЗаполнитьСпискиВыбораЯзыкаИРежимаЗапуска(ПользовательИБОпределен)
	
	// Заполнение списка выбора языков интерфейса.
	СписокВыбораЯзыка = Элементы.Язык.СписокВыбора;
	СписокВыбораЯзыка.Очистить();
	
	Для Каждого ЯзыкКонфигурации Из Метаданные.Языки Цикл
		СписокВыбораЯзыка.Добавить(ЯзыкКонфигурации.Имя, ЯзыкКонфигурации.Представление());
	КонецЦикла;
	
	// Заполнение списка выбора режима запуска.
	СписокВыбораРежимаЗапуска = Элементы.РежимЗапуска.СписокВыбора;
	СписокВыбораРежимаЗапуска.Очистить();
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.Авто); 
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение);
	
	Если ПользовательИБОпределен Тогда
		Возврат;
	КонецЕсли;
	
	// Установка стандартных значений для нового пользователя.		
	ОсновнойРежимЗапуска = Метаданные.ОсновнойРежимЗапуска;
	Если Не ОсновнойРежимЗапуска = Неопределено Тогда
		РежимЗапуска = СписокВыбораРежимаЗапуска.НайтиПоЗначению(ОсновнойРежимЗапуска).Значение;
	КонецЕсли;
			
	ОсновнойЯзыкИнтерфейса = Метаданные.ОсновнойЯзык;
	Если Не ОсновнойЯзыкИнтерфейса = Неопределено Тогда
		СписокВыбораЯзыкаИнтерфейса = Элементы.Язык.СписокВыбора;
		Язык						= СписокВыбораЯзыкаИнтерфейса.НайтиПоЗначению(ОсновнойЯзыкИнтерфейса.Имя).Значение;
	КонецЕсли;
	
	ЗащитаОтОпасныхДействий = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

