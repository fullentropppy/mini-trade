
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Модуль формы
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события При создании на сервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// Основные данные.
	ЗаголовокПрограммы 	= Константы.ЗаголовокПрограммы.Получить();
	ИспользоватьППД		= ПолнотекстовыйПоискДанныхСервер.ИспользуетсяППД();
	
	// Логирование информации об изменениях.
	ЛогироватьИнформациюОбИзменениях 		= ПолучитьФункциональнуюОпцию("ЛогироватьИнформациюОбИзменениях");
	КомментироватьИнформациюОбИзменениях	= ПолучитьФункциональнуюОпцию("КомментироватьИнформациюОбИзменениях");
	
	Элементы.ГруппаКомментироватьИнформациюОбИзменениях.Видимость = ЛогироватьИнформациюОбИзменениях;
	
	// Информация о программе.	
	ШаблонИнформации = НСтр("ru = 'Конфигурация ""%1"", версия %2.
		|Авторские права: %3'");
	Информация = СтрШаблон(ШаблонИнформации, Метаданные.Синоним, Метаданные.Версия, Метаданные.АвторскиеПрава);
	
	Элементы.НадписьИнформацияОпрограмме.Заголовок = Информация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события Заголовок программы при изменении.
//
&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	
	УстанавливаемыйЗаголовокПрограммы = УстанавливаемыйЗаголовокПрограммы(ЗаголовокПрограммы);	
	УстановитьЗаголовокПриложения(УстанавливаемыйЗаголовокПрограммы);
	
КонецПроцедуры

// Обработчик события Использовать ППД при изменении.
//
&НаКлиенте
Процедура ИспользоватьППДПриИзменении(Элемент)
	
	ПолнотекстовыйПоискДанныхВызовСервера.ПереключитьИспользованиеППД(ИспользоватьППД);
	
КонецПроцедуры

// Обработчик события Логировать информацию об изменениях при изменении.
//
&НаКлиенте
Процедура ЛогироватьИнформациюОбИзмененияхПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты(
		"ЛогироватьИнформациюОбИзменениях", ЛогироватьИнформациюОбИзменениях);
	
	Элементы.ГруппаКомментироватьИнформациюОбИзменениях.Видимость = ЛогироватьИнформациюОбИзменениях;
			
	ОбновитьИнтерфейс();
	
КонецПроцедуры

// Обработчик события Комментировать информацию об изменениях при изменении.
//
&НаКлиенте
Процедура КомментироватьИнформациюОбИзмененияхПриИзменении(Элемент)
	
	ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты(
		"КомментироватьИнформациюОбИзменениях", КомментироватьИнформациюОбИзменениях);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Гиперссылка Дополнительно (группа Полнотекстовый поиск данных);
//  Открывает обработку Управление полнотекстовым поиском данных.
//
&НаКлиенте
Процедура ОткрытьУправлениеППД(Команда)
	
	ПараметрыФормы = Новый Структура("ДействиеИзНастроекПрограммы");
	ОткрытьФорму("Обработка.УправлениеПолнотекстовымПоискомДанных.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Гиперссылка Информация об изменениях (группа Логирование информации об изменениях);
//  Открывает отчет Информация об изменениях.
//
&НаКлиенте
Процедура ОткрытьИнформациюОбИзмененияхОбъектов(Команда)
	
	ОткрытьФорму("Отчет.ИнформацияОбИзменениях.Форма");
	
КонецПроцедуры

// Гиперссылка Информация об изменениях (группа Логирование информации об изменениях);
//  Открывает регистр сведений Информация об изменениях.
//
&НаКлиенте
Процедура ОткрытьРегистрСведенийИнформацияОбИзмененияхОбъектов(Команда)
	
	ОткрытьФорму("РегистрСведений.ИнформацияОбИзменениях.Форма.ФормаСписка");
	
КонецПроцедуры

// Гиперссылка Версии программы (группа Информация о программе);
//  Открывает отчет Версии программы.
//
&НаКлиенте
Процедура ОткрытьВерсииПрограммы(Команда)
	
	ОткрытьФорму("Отчет.ВерсииПрограммы.Форма.Форма");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает новый заголовок в константу ЗаголовокПрограммы и возвращает преобразованный устанавливаемый заголовок.
//
// Параметры:
//  ЗаголовокПрограммы - Строка - обрабатываемый заголовок.
// 
// Возвращаемое значение:
//   - Строка - преобразованный устанавливаемый заголовок.
//
&НаСервереБезКонтекста
Функция УстанавливаемыйЗаголовокПрограммы(ЗаголовокПрограммы)
	
	// Запись нового заголовка. 
	Константы.ЗаголовокПрограммы.Установить(ЗаголовокПрограммы);
	
	// Получение устанавливаемого заголовка. Если был указан пустой заголовок,
	// то устанавливаемый заголовок будет преобразован в стандартный.
	Заголовок = ОбщегоНазначенияСервер.ЗаголовокПрограммы();
	
	Возврат Заголовок;
	
КонецФункции

#КонецОбласти