
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Модуль формы
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Доступные режимы формы подбора товаров (текущий режим определеяется значением реквизита РежимФормы):
//
// Без количества и цены:
// * 0 - простой подбор;
//
// С количеством:
// * 1 - подбор с указанием количества на одном складе (Склад 1); 
// * 2 - подбор с указанием количества на складе списания (Склад 1) и поступления (Склад 2);
//
// С ценой и количеством:
// * 3 - подбор с указанием цены и количества на одном складе (Склад 1);
// * 4 - подбор с указанием цены и количества на складе списания (Склад 1) и поступления (Склад 2);
//
// С ценой без количества:
// * 5 - подбор с указанием цены;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события При создании на сервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Не Параметры.Свойство("РежимФормы", РежимФормы) Тогда
		// Запрет на использование обработки вне контекста документа.
		ТекстИсключения = НСтр("ru = 'Открытие обработки возможно только из документов'");
		ВызватьИсключение ТекстИсключения;
	ИначеЕсли РежимФормы < 0 ИЛИ РежимФормы > 5 Тогда
		ТекстИсключения = НСтр("ru = 'Неверный параметр формы РежимФормы:
			|указано недопустимое значение параметра!'");
		ВызватьИсключение ТекстИсключения;
	Иначе
		УстановитьДанныеФормы(Параметры);	
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события Перед закрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если Модифицированность Тогда
		Отказ 				= Истина;
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПередЗакрытиемПослеОтвета", ЭтаФорма);
		ТекстВопроса		= НСтр("ru = 'В корзине есть не перенесенные в документ товары. Перенести?'");		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Обработчик события Товары выбор.
//
&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьТоварВКорзинуИзТекущихДанныхСписка();
	
КонецПроцедуры

// Обработчик события Товары при активизации строки.
//
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные 		= Элементы.Товары.ТекущиеДанные;
	ЗначениеДоступности = Не ТекущиеДанные = Неопределено;
	
	// Командная панель.
	ЭлементыКоманднойПанели = Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы;
	КнопкиКоманднойПанели 	= ЭлементыКоманднойПанели.ТоварыДополнительныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКоманднойПанели.ОткрытьТоварВСпискеТоваров.Доступность = ЗначениеДоступности;
		
	// Контекстное меню.
	ЭлементыКонтекстногоМеню 	= Элементы.Товары.КонтекстноеМеню.ПодчиненныеЭлементы;
	КнопкиКонтекстногоМеню		= ЭлементыКонтекстногоМеню.ТоварыКонтекстноеМенюДополнительныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКонтекстногоМеню.ТоварыКонтекстноеМенюОткрытьТоварВСпискеТоваров.Доступность 	= ЗначениеДоступности;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

// Обработчик события Корзина при изменении.
//
&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	Если РежимФормы > 2 И Корзина.Количество() Тогда
		ТабличныеЧастиКлиентСервер.РассчитатьСуммуВСтрокеТоваров(Элементы.Корзина.ТекущиеДанные);
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Корзина при активизации строки.
//
&НаКлиенте
Процедура КорзинаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные 		= Элементы.Корзина.ТекущиеДанные;
	ЗначениеДоступности = Не ТекущиеДанные = Неопределено;
	
	// Командная панель.
	ЭлементыКоманднойПанели = Элементы.Корзина.КоманднаяПанель.ПодчиненныеЭлементы;
	КнопкиКоманднойПанели 	= ЭлементыКоманднойПанели.КорзинаДополнительныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКоманднойПанели.КорзинаОткрытьТоварВКорзине.Доступность = ЗначениеДоступности;
		
	// Контекстное меню.
	ЭлементыКонтекстногоМеню 	= Элементы.Корзина.КонтекстноеМеню.ПодчиненныеЭлементы;
	КнопкиКонтекстногоМеню		= ЭлементыКонтекстногоМеню.КорзинаКонтекстноеМенюДополнительныеКоманды.ПодчиненныеЭлементы;
	
	КнопкиКонтекстногоМеню.КорзинаКонтекстноеМенюОткрытьТоварВКорзине.Доступность = ЗначениеДоступности;
	
	
КонецПроцедуры

// Обработчик события Корзина перед началом добавления.
//
&НаКлиенте
Процедура КорзинаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Запрет на ручное добавление строк в корзине.
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команда Перенести в документ;
//  Переносит данные из таблицы значений Корзина в документ.
//
&НаКлиенте
Процедура ПеренестиТоварыВДокумент(Команда)
	
	Если Корзина.Количество() Тогда
		ПеренестиТоварыИзКорзиныВдокумент();	
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Заполните корзину товарами для переноса в документ'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Команда Открыть (список Товары);
//  Открыввает карточку выбранного товара в списке Товары.
//
&НаКлиенте
Процедура ОткрытьТоварВСпискеТоваров(Команда)
	
	ОткрытьКарточкуТовара(Элементы.Товары.Имя);
		
КонецПроцедуры

// Команда Открыть (список Корзина);
//  Открыввает карточку выбранного товара в списке Корзина.
//
&НаКлиенте
Процедура ОткрытьТоварВКорзине(Команда)
	
	ОткрытьКарточкуТовара(Элементы.Корзина.Имя);	
	
КонецПроцедуры

// Команда Добавить в корзину;
//  Добавляет выделенный в динамическом списке Товары товар в таблицу значений Корзина.
//
&НаКлиенте
Процедура ДобавитьТоварВКорзину(Команда)
	
	ДобавитьТоварВКорзинуИзТекущихДанныхСписка();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение выполнения обработчика ПередЗакрытием. 
//
&НаКлиенте
Процедура ПередЗакрытиемПослеОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиТоварыИзКорзиныВдокумент();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;		
	
КонецПроцедуры

// Добавляет новую строку в таблицу значений Корзина на основании текущих данных динамического списка Товары.
//
&НаКлиенте
Процедура ДобавитьТоварВКорзинуИзТекущихДанныхСписка()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Товар		= ТекущиеДанные.Товар;
	ЭтоГруппа 	= ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Товар, "ЭтоГруппа");
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока 		= Корзина.Добавить();
	НоваяСтрока.Товар 	= Товар;
		
	Если РежимФормы > 2 Тогда
		НоваяСтрока.Цена = ТекущиеДанные.Цена;
	КонецЕсли;
		
	Модифицированность 	= Истина;
		
КонецПроцедуры

// Открывает карточку товара, выбранного в списке.
//
// Параметры:
//  ИмяСписка - Строка - имя списка, содержащего товар. 
//
&НаКлиенте
Процедура ОткрытьКарточкуТовара(ИмяСписка)
	
	ТекущиеДанные = Элементы[ИмяСписка].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Выберите товар для открытия карточки'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Товар); 
	КонецЕсли;
		
КонецПроцедуры

// Переносит данные из таблицы значений Корзина в документ. 
//
&НаКлиенте
Процедура ПеренестиТоварыИзКорзиныВдокумент()
	
	АдресВременногоХранилища = ОбщегоНазначенияВызовСервера.АдресВременногоХранилищаОбъекта(Корзина);
	ВладелецФормы.ОбработатьПодборТоваров(АдресВременногоХранилища);	
	Модифицированность = Ложь;
	Закрыть();	
	
КонецПроцедуры

// Устанавливает данные реквизитов, параметры динамического списка Товары и оформление формы.
//
// Параметры:
//  ПараметрыФормы - Структура - копия структуры параметров формы. 
//
&НаСервере
Процедура УстановитьДанныеФормы(ПараметрыФормы)
	
	ЭлементыТоваров	= Элементы.Товары.ПодчиненныеЭлементы;
	ЭлементыКорзины	= Элементы.Корзина.ПодчиненныеЭлементы;
	
	// Установка данных списка товаров.
	Товары.ТекстЗапроса = ТекстЗапросаТоваров(РежимФормы);	
	
	Если РежимФормы = 0 Тогда
		УстановитьВидимостьЭлементовЦены(Ложь);
		УстановитьВидимостьЭлементовКоличества(Ложь);
		Возврат;
	ИначеЕсли РежимФормы > 0 И РежимФормы < 5 Тогда
		УстановитьДанныеСклада(1, ПараметрыФормы);	
		УстановитьДанныеСклада(2, ПараметрыФормы);		
	ИначеЕсли РежимФормы = 5 Тогда
		УстановитьВидимостьЭлементовКоличества(Ложь);
	КонецЕсли;	
			
	// Определение данных вида цены и валюты.
	Если ПараметрыФормы.Свойство("ВидЦены", ВидЦены) Тогда
		Товары.Параметры.УстановитьЗначениеПараметра("ВидЦены", ВидЦены);
		
		// Определение данных даты актуальности цены.
		ПараметрыФормы.Свойство("ДатаАктуальностиЦены", ДатаАктуальностиЦены);	
		ДатаАктуальностиЦены = ?(ЗначениеЗаполнено(ДатаАктуальностиЦены), ДатаАктуальностиЦены, КонецДня(ТекущаяДата()));
		Товары.Параметры.УстановитьЗначениеПараметра("Период", ДатаАктуальностиЦены);
	Иначе
		УстановитьВидимостьЭлементовЦены(Ложь);
	КонецЕсли;

	// Ограничение редактирования цены.
	ИзменениеЦены = ?(Параметры.Свойство("ИзменениеЦены"), Параметры.ИзменениеЦены, Истина);
	Элементы.Корзина.ПодчиненныеЭлементы.КорзинаЦена.ТолькоПросмотр = Не ИзменениеЦены;

КонецПроцедуры

// Устанавливает видимость элементов формы связанных с ценом.
//
// Параметры:
//  Значение - Булево - значение видимости элементов. 
//
&НаСервере
Процедура УстановитьВидимостьЭлементовЦены(Значение)
	
	Элементы.ВидЦены.Видимость 				= Значение;
	Элементы.ВидЦеныВалюта.Видимость		= Значение;
	Элементы.ДатаАктуальностиЦены.Видимость	= Значение;
	
	ЭлементыТоваров	= Элементы.Товары.ПодчиненныеЭлементы;
	ЭлементыКорзины	= Элементы.Корзина.ПодчиненныеЭлементы;
	
	ЭлементыТоваров.ТоварыЦена.Видимость = Значение;
		
	ЭлементыКорзины.КорзинаЦена.Видимость  	= Значение;
	ЭлементыКорзины.КорзинаСумма.Видимость	= Значение;	
	
КонецПроцедуры

// Устанавливает видимость элементов формы связанных с количеством.
//
// Параметры:
//  Значение - Булево - значение видимости элементов. 
//
&НаСервере
Процедура УстановитьВидимостьЭлементовКоличества(Значение)
	
	Элементы.Склад1.Видимость = Значение;
	Элементы.Склад2.Видимость = Значение;
	
	ЭлементыТоваров	= Элементы.Товары.ПодчиненныеЭлементы;
	ЭлементыКорзины	= Элементы.Корзина.ПодчиненныеЭлементы;
	
	ЭлементыТоваров.ТоварыОстатокНаСкладе1.Видимость 	= Значение;
	ЭлементыТоваров.ТоварыОстатокНаСкладе2.Видимость 	= Значение;
	
	ЭлементыКорзины.КорзинаКоличество.Видимость	= Значение;
	ЭлементыКорзины.КорзинаСумма.Видимость		= Значение;
	
КонецПроцедуры

// Устанавливает данные реквизита, значение параметра динамического списка Товары и оформление формы;
//  относящихся к данным склада.
//
// Параметры:
//  НомерСклада		- Число		- номер склада: 1 или 2. Определеяет установку параметров по реквизиту Склад1 или Склад2;
//  ПараметрыФормы	- Структура - копия структуры параметров формы.  
//
&НаСервере
Процедура УстановитьДанныеСклада(НомерСклада, ПараметрыФормы) 
	
	ИмяСвойства 		= "Склад" + НомерСклада;
	ИмяСвойстваСписка	= "ТоварыОстатокНаСкладе" + НомерСклада;
	ЭлементыТоваров 	= Элементы.Товары.ПодчиненныеЭлементы;

	Если ПараметрыФормы.Свойство(ИмяСвойства, ЭтаФорма[ИмяСвойства]) Тогда
		Товары.Параметры.УстановитьЗначениеПараметра(ИмяСвойства, ЭтаФорма[ИмяСвойства]);
		
		ИмяСвойстваЗаголовка = СтрШаблон("Склад%1Заголовок", НомерСклада); 
		Если ПараметрыФормы.Свойство(ИмяСвойстваЗаголовка) И Не ПустаяСтрока(ПараметрыФормы[ИмяСвойстваЗаголовка]) Тогда
			СкладЗаголовок = ПараметрыФормы[ИмяСвойстваЗаголовка];
		Иначе
			СкладЗаголовок = НСтр("ru = 'Склад'");
		КонецЕсли;
		
		Элементы[ИмяСвойства].Заголовок = СкладЗаголовок;
		
		ИмяСвойстваЗаголовкаОстатка = СтрШаблон("ОстатокНаСкладе%1Заголовок", НомерСклада); 
		Если ПараметрыФормы.Свойство(ИмяСвойстваЗаголовкаОстатка) И Не ПустаяСтрока(ПараметрыФормы[ИмяСвойстваЗаголовкаОстатка]) Тогда
			ОстатокНаСкладеЗаголовок = ПараметрыФормы[ИмяСвойстваЗаголовкаОстатка];
		Иначе
			ОстатокНаСкладеЗаголовок = НСтр("ru = 'Остаток'");
		КонецЕсли;
		
		ЭлементыТоваров[ИмяСвойстваСписка].Заголовок = ОстатокНаСкладеЗаголовок;
	Иначе
		Элементы[ИмяСвойства].Видимость 				= Ложь;
		ЭлементыТоваров[ИмяСвойстваСписка].Видимость 	= Ложь;
	КонецЕсли;	
	
КонецПроцедуры

// Формирует запрос для динамического списка Товары для требуемого режима формы.
//
// Параметры:
//  РежимФормы - Число - текущий режим формы. 
// 
// Возвращаемое значение:
//   - Строка 
//
&НаСервереБезКонтекста
Функция ТекстЗапросаТоваров(РежимФормы)
	
	Если РежимФормы = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СправочникТовары.Код КАК Код,
		|	СправочникТовары.Ссылка КАК Товар
		|ИЗ
		|	Справочник.Товары КАК СправочникТовары
		|ГДЕ
		|	НЕ СправочникТовары.ПометкаУдаления";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	// Определение универсального шаблона запроса.
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СправочникТовары.Код КАК Код,
		|	СправочникТовары.Ссылка КАК Товар,
		|	&ДополнительныеПоля КАК ДополнительныеПоля
		|ИЗ
		|	Справочник.Товары КАК СправочникТовары,
		|	&ДополнительныеТаблицы КАК ДополнительныеТаблицы
		|ГДЕ
		|	НЕ СправочникТовары.ПометкаУдаления";
			
	МассивДополнительныхПолей 	= Новый Массив;
	МассивДополнительныхТаблиц 	= Новый Массив;
	
	Если РежимФормы > 2 Тогда
		// Добавление выбора данных цены товаров.		
		ДополнительноеПоле = 
			"	Цены.Цена КАК Цена";
		МассивДополнительныхПолей.Добавить(ДополнительноеПоле);
		
		ДополнительнаяТаблица = 
			"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныТоваров.СрезПоследних(&Период, ВидЦены = &ВидЦены) КАК Цены
			|		ПО СправочникТовары.Ссылка = Цены.Товар";
		МассивДополнительныхТаблиц.Добавить(ДополнительнаяТаблица);
	КонецЕсли;
		
	Если РежимФормы = 1 ИЛИ РежимФормы = 3 Тогда
		// Добавление выбора данных по остаткам на складе.
	  	ДополнительноеПоле = "	Остатки.КоличествоОстаток КАК ОстатокНаСкладе1";
		МассивДополнительныхПолей.Добавить(ДополнительноеПоле);
			
		ДополнительнаяТаблица = 
			"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваров.Остатки(, Склад = &Склад1) КАК Остатки
			|		ПО СправочникТовары.Ссылка = Остатки.Товар";
		МассивДополнительныхТаблиц.Добавить(ДополнительнаяТаблица);
	КонецЕсли;
	
	Если РежимФормы = 2 ИЛИ РежимФормы = 4 Тогда
		// Добавление выбора данных по остаткам на складе 1 и складе 2.
		ДополнительноеПоле = 
			"	ОстаткиНаСкладе1.КоличествоОстаток КАК ОстатокНаСкладе1,
			|	ОстаткиНаСкладе2.КоличествоОстаток КАК ОстатокНаСкладе2";
		МассивДополнительныхПолей.Добавить(ДополнительноеПоле);
		
		ДополнительнаяТаблица = 
			"	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваров.Остатки(, Склад = &Склад1) КАК ОстаткиНаСкладе1
			|		ПО СправочникТовары.Ссылка = ОстаткиНаСкладе1.Товар
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваров.Остатки(, Склад = &Склад2) КАК ОстаткиНаСкладе2
			|		ПО СправочникТовары.Ссылка = ОстаткиНаСкладе2.Товар";
		МассивДополнительныхТаблиц.Добавить(ДополнительнаяТаблица);
	КонецЕсли;
	
	// Компоновка итогового текста запроса.
	ДополнительныеПоля 		= СтрСоединить(МассивДополнительныхПолей, "," + Символы.ПС);
	ДополнительныеТаблицы	= СтрСоединить(МассивДополнительныхТаблиц, Символы.ПС);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Товары КАК СправочникТовары,", "Справочник.Товары КАК СправочникТовары"); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоля КАК ДополнительныеПоля", ДополнительныеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеТаблицы КАК ДополнительныеТаблицы", ДополнительныеТаблицы); 
	
	Возврат ТекстЗапроса;	
	
КонецФункции

#КонецОбласти