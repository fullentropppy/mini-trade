
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Модуль формы
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события При создании на сервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПарольУстановлен") 
	 И Не Параметры.ПарольУстановлен Тогда
		ДействиеИзКарточкиПользователя = Истина;
		НовыйЗаголовок = НСтр("ru = 'Установка пароля'");
	Иначе	
		НовыйЗаголовок = НСтр("ru = 'Изменение пароля'");
	КонецЕсли;
	
	ДействиеИзКарточкиПользователя 	= Параметры.Свойство("ДействиеИзКарточкиПользователя");
	ЭтаФорма.Заголовок 				= НовыйЗаголовок;
	
КонецПроцедуры

// Обработчик события При открытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьСовпадениеПаролей()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события Новый пароль изменение текста редактирования.
//
&НаКлиенте
Процедура НовыйПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПроверитьСовпадениеПаролей();
	
КонецПроцедуры

// Обработчик события Подтверждение пароля изменение текста редактирования.
//
&НаКлиенте
Процедура ПодтверждениеПароляИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПроверитьСовпадениеПаролей();
	
КонецПроцедуры

// Обработчик события Показывать пароль при изменении.
//
&НаКлиенте
Процедура ПоказыватьПарольПриИзменении(Элемент)
	
	ЗначениеРежимаПароля 						= Не ДействиеИзКарточкиПользователя;
	Элементы.НовыйПароль.РежимПароля 			= ЗначениеРежимаПароля;
	Элементы.ПодтверждениеПароля.РежимПароля 	= ЗначениеРежимаПароля;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команда Установить.
//
&НаКлиенте
Процедура УстановитьПароль(Команда)
		
	Если Не НовыйПароль = ПодтверждениеПароля Тогда
		ТекстПредупреждения = НСтр("ru = 'Новый пароль и подтверждение пароля не совпадают!
			|Проверьте указанные данные и повторите снова'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДействиеИзКарточкиПользователя Тогда
		Закрыть(НовыйПароль);
	Иначе
		УстановитьПарольНаСервере();
		Закрыть();		
	КонецЕсли;
	
КонецПроцедуры

// Команда Отменить.
//
&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры

// Команда Сгенерировать.
//
&НаКлиенте
Процедура СгенерироватьПароль(Команда)
	
	// Генерация пароля заданной длины.
	Длина 		= ДлинаПароляДляГенерации();
	НовыйПароль = СгенерированныйПароль(Длина);
	
	// Копирование сгенерированного пароля в буфер обмена
	ОбщегоНазначенияКлиент.ПоместитьТекстВБуферОбмена(НовыйПароль);
		
	ОписаниеОповещения	= Новый ОписаниеОповещения("СгенерироватьПарольЗавершение", ЭтаФорма);
	ТекстПредупреждения = СтрШаблон(
		НСтр("ru = 'Сгенерирован новый пароль: %1
				   |Новый пароль скопирован в буфер обмена'"), 
		НовыйПароль);		
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение выполнения обработчика СгенерироватьПароль. 
//
&НаКлиенте
Процедура СгенерироватьПарольЗавершение(ДополнительныеПараметры) Экспорт
	
	ПроверитьСовпадениеПаролей();
	
КонецПроцедуры

// Проверка вводимого текста в поле Подтверждение на совпадение с данными, указанными в поле Новый пароль.
//
&НаКлиенте
Процедура ПроверитьСовпадениеПаролей()
	
	ЗначениеВидимость = Не (Элементы.НовыйПароль.ТекстРедактирования = Элементы.ПодтверждениеПароля.ТекстРедактирования);
	Элементы.НадписьПарольНеСовпадает.Видимость = ЗначениеВидимость;
	
КонецПроцедуры

// Генерирует пароль заданной длины, удовлетваряющий следующим требованиям;
//  содержит цифры, латинские буквы нижнего и верхнего регистра.
//
// Параметры:
//  Длина - Число - длина генерируемого пароля. 
// 
// Возвращаемое значение:
//   - Строка 
//
&НаКлиенте
Функция СгенерированныйПароль(Длина)
	
	Пароль = ОбщегоНазначенияКлиентСервер.СлучайнаяСтрока(Длина, Истина, Ложь, Истина, Ложь);
	
	ПарольНРег = НРег(Пароль);
	ПарольВРег = ВРег(Пароль);
 	
	Если Пароль = ПарольНРег
	 ИЛИ Пароль = ПарольВРег
	 ИЛИ Не ОбщегоНазначенияКлиентСервер.СтрокаСодержитЦифры(Пароль)
	 ИЛИ Не ОбщегоНазначенияКлиентСервер.СтрокаСодержитЛатиницу(Пароль) Тогда
	 	// Генерация нового пароля с проверкой 
		// на соответствие требуемой сложности.
		Пароль = СгенерированныйПароль(Длина);
	КонецЕсли;
	
	Возврат Пароль;

КонецФункции
	
// Устанавливает заданный пароль для текущего пользователя информаионной базы
//
&НаСервере
Процедура УстановитьПарольНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ 			= ПользователиСервер.ТекущийПользовательИБ();
	ПользовательИБ.Пароль 	= НовыйПароль;
	ПользовательИБ.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает длину пароля исходя из настроек политики паролей информационной базы.
// 
// Возвращаемое значение:
//   - Число
//
&НаСервереБезКонтекста
Функция ДлинаПароляДляГенерации()
	
	МинимальнаяДлина	= ПолучитьМинимальнуюДлинуПаролейПользователей();
	Длина 				= ?(МинимальнаяДлина > 7, МинимальнаяДлина, 8);
	
	Возврат Длина;
	
КонецФункции

#КонецОбласти



