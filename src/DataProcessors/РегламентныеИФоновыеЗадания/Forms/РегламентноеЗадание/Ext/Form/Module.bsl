
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// © Гриценко Даниил 2021-2023г. | Модуль формы
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

// Обработчик события При создании на сервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ЗаполнитьДанныеИУстановитьУсловноеОформлениеНаФорме();
	Иначе
		ТекстИсключения = НСтр("ru = 'Не указан идентификатор регламентного задания!'"); 
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
			
КонецПроцедуры

// Обработчик события Перед закрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ФормыКлиент.ПроверитьМодифицированностьПередЗакрытием(ЭтаФорма, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Команда Записать.
//
&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьДанные();
	
КонецПроцедуры

// Команда Записать и закрыть.
//
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьДанные();
	Закрыть();
	
КонецПроцедуры

// Команда Расписание;
//  Открывает стандартную форму настройки рассписания регламентного задания.
//
&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДополнительныеПараметры 		= Новый Структура("Идентификатор", Идентификатор);
	ОписаниеОповещения				= Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", 
		ЭтаФорма, ДополнительныеПараметры);
		
	// Открытие системной формы настройки расписания регламентного задания.
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);		
	ДиалогРасписания.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Завершение выполнения обработчика ПередЗакрытием. 
//
&НаКлиенте
Процедура ПроверитьМодифицированностьПередЗакрытиемПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанные();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
    КонецЕсли;	
	
КонецПроцедуры

// Завершение выполнения обработчика НастроитьРасписание. 
//
&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		УстановитьРасписаниеРегламентногоЗадания(ДополнительныеПараметры.Идентификатор, Результат);
	КонецЕсли;
		
КонецПроцедуры

// Заполняет данные регламентного задания и устанавливает условное оформление на форме.
//
&НаСервере
Процедура ЗаполнитьДанныеИУстановитьУсловноеОформлениеНаФорме()
	
	// Заполнение реквизитов формы из данных регламентного задания.
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Параметры.Идентификатор);
	Наименование		= РегламентноеЗадание.Наименование;
	Использование		= РегламентноеЗадание.Использование;
	Имя					= РегламентноеЗадание.Метаданные.Имя;
	Синоним				= РегламентноеЗадание.Метаданные.Синоним;
	ИмяМетода			= РегламентноеЗадание.Метаданные.ИмяМетода;
	Идентификатор		= РегламентноеЗадание.УникальныйИдентификатор;
	Ключ				= РегламентноеЗадание.Ключ;
	ИмяПользователя		= РегламентноеЗадание.ИмяПользователя;
	Расписание			= РегламентноеЗадание.Расписание;
	
	КоличествоПовторовПриОшибках 	= РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении;
	ИнтервалПовторовВСекундах		= РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении;
	
	// Определение заголовка формы.
	Предопределенное 	= РегламентноеЗадание.Предопределенное;
	Заголовок			= ?(Предопределенное, 
		НСтр("ru = 'Предопределенное регламентное задание'"), НСтр("ru = 'Регламентное задание'")); 
		
	// Заполнение списка выбора реквизита формы ИмяПользователя.
	СписокВыбораПользователя 	= Элементы.ИмяПользователя.СписокВыбора;
	Пользователи				= ПользователиИнформационнойБазы.ПолучитьПользователей();	
	
	Для Каждого Пользователь Из Пользователи Цикл
		СписокВыбораПользователя.Добавить(Пользователь.Имя);		
	КонецЦикла;
	
	// Параметры запуска.
	ПараметрыЗапуска.ЗагрузитьЗначения(РегламентноеЗадание.Параметры);
	
	// Информация об ошибке.
	ПоследнееЗадание = РегламентноеЗадание.ПоследнееЗадание;
	Если ПоследнееЗадание = Неопределено Тогда
		Элементы.СтраницаИнформацииОбОшибке.Доступность = Ложь;		
	Иначе
		ИнформацияОбОшибке = ПоследнееЗадание.ИнформацияОбОшибке;
		Если ИнформацияОбОшибке = Неопределено Тогда
			Элементы.СтраницаИнформацииОбОшибке.Доступность = Ложь;
		Иначе
			Элементы.СтраницаИнформацииОбОшибке.Картинка = БиблиотекаКартинок.Предупреждение;
			// Заполнение информации об ошибке последнего фонового задания.
			ИнформацияОбОшибкеМодуль 	= СтрШаблон("%1 (%2)", ИнформацияОбОшибке.ИмяМодуля, ИнформацияОбОшибке.НомерСтроки);
			ИнформацияОбОшибкеСтрока	= ИнформацияОбОшибке.ИсходнаяСтрока;
			ИнформацияОбОшибкеОписание	= ИнформацияОбОшибке.Описание;
			ИнформацияОбОшибкеПричина	= КраткоеПредставлениеОшибки(ИнформацияОбОшибке.Причина);			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Записывает указанные данные на форме в параметры регламентного задания.
//
&НаСервере
Процедура ЗаписатьДанные()
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
	
	РегламентноеЗадание.Наименование 								= Наименование;
	РегламентноеЗадание.Использование 								= Использование;
	РегламентноеЗадание.Ключ										= Ключ;
	РегламентноеЗадание.ИмяПользователя								= ИмяПользователя;
	РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении 	= КоличествоПовторовПриОшибках;
	РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении		= ИнтервалПовторовВСекундах;
	РегламентноеЗадание.Параметры									= ПараметрыЗапуска.ВыгрузитьЗначения();
	РегламентноеЗадание.Записать();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Устанавливает расписание для регламентного задания.
//
// Параметры:
//  Идентификатор 	- УникальныйИдентификатор 			- идентификатор регламентного задания; 
//  Расписание		- РасписаниеРегламентногоЗадания 	- устанавливаемое расписание регламентного задания.
//
&НаСервереБезКонтекста
Процедура УстановитьРасписаниеРегламентногоЗадания(Идентификатор, Расписание) Экспорт
	
	РегламентноеЗадание 			= РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	РегламентноеЗадание.Расписание 	= Расписание;
	РегламентноеЗадание.Записать();
		
КонецПроцедуры

#КонецОбласти